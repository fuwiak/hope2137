#!/usr/bin/env python3
"""
Test script to check –ê—Ä–∏–Ω–∞'s actual services from API
"""
import os
import sys
from dotenv import load_dotenv

# Add current directory to path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from yclients_client import YClientsClient
import logging

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
log = logging.getLogger(__name__)

def test_arina_services():
    """Test –ê—Ä–∏–Ω–∞'s actual services from API"""
    load_dotenv()
    
    partner_token = os.getenv("YCLIENTS_PARTNER_TOKEN")
    user_token = os.getenv("YCLIENTS_USER_TOKEN")
    
    if not partner_token or not user_token:
        print("‚ùå Missing YClients tokens in .env file")
        return False
    
    yclients = YClientsClient(partner_token, user_token)
    
    try:
        # Get company ID
        companies = yclients.my_companies()
        company_id = companies["data"][0]["id"]
        print(f"‚úÖ Company ID: {company_id}")
        
        # Get all masters
        masters_response = yclients.company_masters(company_id)
        masters = masters_response["data"]
        
        # Find –ê—Ä–∏–Ω–∞
        arina = None
        for master in masters:
            if "–∞—Ä–∏–Ω–∞" in master["name"].lower():
                arina = master
                break
        
        if not arina:
            print("‚ùå –ê—Ä–∏–Ω–∞ not found")
            return False
            
        print(f"‚úÖ Found –ê—Ä–∏–Ω–∞: {arina['name']} (ID: {arina['id']})")
        print(f"   Specialization: {arina['specialization']}")
        
        # Get ALL services for –ê—Ä–∏–Ω–∞
        print(f"\nüîç Getting ALL services for –ê—Ä–∏–Ω–∞ from API...")
        services_response = yclients.get_service_details(company_id, staff_id=arina['id'])
        
        if services_response.get("success"):
            services = services_response.get("data", [])
            print(f"‚úÖ API returned {len(services)} services for –ê—Ä–∏–Ω–∞:")
            
            for i, service in enumerate(services, 1):
                name = service.get("title", "No name")
                cost = service.get("cost", 0)
                price_min = service.get("price_min", 0)
                price_max = service.get("price_max", 0)
                duration = service.get("length", 0)
                
                print(f"\n{i}. {name}")
                if cost > 0:
                    print(f"   üí∞ Cost: {cost} ‚ÇΩ")
                elif price_min > 0 and price_max > 0:
                    if price_min == price_max:
                        print(f"   üí∞ Price: {price_min} ‚ÇΩ")
                    else:
                        print(f"   üí∞ Price: {price_min}-{price_max} ‚ÇΩ")
                elif price_min > 0:
                    print(f"   üí∞ Price: from {price_min} ‚ÇΩ")
                else:
                    print(f"   üí∞ Price: NO PRICE SET")
                
                if duration > 0:
                    print(f"   ‚è± Duration: {duration} min")
                    
                # Show service ID for debugging
                service_id = service.get("id", "No ID")
                print(f"   üÜî Service ID: {service_id}")
        else:
            print(f"‚ùå Failed to get services: {services_response}")
            return False
        
        # Also check what bot shows vs what API returns
        print(f"\nüìä COMPARISON:")
        print(f"   API services for –ê—Ä–∏–Ω–∞: {len(services)}")
        
        # Check if any services match the user's list
        user_services = [
            "–ú–∞–Ω–∏–∫—é—Ä —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º –≥–µ–ª—å-–ª–∞–∫",
            "–ü–æ–ª–Ω—ã–π –ø–µ–¥–∏–∫—é—Ä —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º –≥–µ–ª—å-–ª–∞–∫", 
            "–ú–∞–Ω–∏–∫—é—Ä –≤ 4 —Ä—É–∫–∏",
            "–ù–∞—Ä–∞—â–∏–≤–∞–Ω–∏–µ –≥–µ–ª–µ–≤—ã—Ö –Ω–æ–≥—Ç–µ–π",
            "–î–∏–∑–∞–π–Ω –Ω–æ–≥—Ç–µ–π (—Ñ–æ–ª—å–≥–∞, —Å—Ç–µ–º–ø–∏–Ω–≥)",
            "–£—Ö–æ–¥ –∑–∞ –∫—É—Ç–∏–∫—É–ª–æ–π (SPA-–º–∞–Ω–∏–∫—é—Ä)",
            "–ü–∞—Ä–∞—Ñ–∏–Ω–æ—Ç–µ—Ä–∞–ø–∏—è –¥–ª—è —Ä—É–∫",
            "–ü–∞—Ä–∞—Ñ–∏–Ω–æ—Ç–µ—Ä–∞–ø–∏—è –¥–ª—è –Ω–æ–≥"
        ]
        
        print(f"\nüîç Checking if user's services exist in API:")
        api_service_names = [s.get("title", "") for s in services]
        
        for user_service in user_services:
            found = any(user_service.lower() in api_name.lower() for api_name in api_service_names)
            status = "‚úÖ FOUND" if found else "‚ùå NOT FOUND"
            print(f"   {status}: {user_service}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error: {e}")
        return False

if __name__ == "__main__":
    print("üß™ Testing –ê—Ä–∏–Ω–∞'s ACTUAL services from API...")
    success = test_arina_services()
    
    if success:
        print("\nüéâ Test completed!")
    else:
        print("\n‚ùå Test failed.")
        sys.exit(1)
