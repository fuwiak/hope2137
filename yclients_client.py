# yclients_client.py
import requests
from typing import Any, Dict, Optional

BASE = "https://api.yclients.com/api/v1"
ACCEPT = "application/vnd.yclients.v2+json"

class YClientsError(RuntimeError):
    def __init__(self, status: int, meta: Any):
        super().__init__(f"YClients API error (HTTP {status}): {meta}")
        self.status = status
        self.meta = meta

class YClientsClient:
    def __init__(self, partner_token: str, user_token: str, timeout: int = 30):
        self.partner_token = partner_token
        self.user_token = user_token
        self.timeout = timeout
        self.session = requests.Session()
        # –í—Å–µ –≤—ã–∑–æ–≤—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫:
        self.session.headers.update({
            "Accept": ACCEPT,
            "Authorization": f"Bearer {self.partner_token}, User {self.user_token}",
            # –ù–∏–∫–∞–∫–æ–≥–æ Partner-Token –æ—Ç–¥–µ–ª—å–Ω–æ ‚Äî –æ–Ω —É–∂–µ –≤ Authorization
        })

    # --- –Ω–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–µ –≤—ã–∑–æ–≤—ã ---
    def _handle(self, r: requests.Response) -> Dict[str, Any]:
        status = r.status_code
        
        # –î–ª—è status 204 (No Content) zwracamy sukces bez parsowania JSON
        if status == 204:
            return {"success": True, "data": None, "meta": []}
        
        try:
            data = r.json()
        except Exception:
            r.raise_for_status()  # –ø–æ–¥–Ω–∏–º–µ—Ç HTTPError —Å —Ç–µ–ª–æ–º, –µ—Å–ª–∏ –Ω–µ JSON
        if status >= 400 or not data.get("success", False):
            raise YClientsError(status, data.get("meta"))
        return data

    def get(self, path: str, params: Optional[Dict[str, Any]] = None) -> Dict[str, Any]:
        import logging
        log = logging.getLogger()
        log.info(f"üåê YCLIENTS GET REQUEST: {BASE}{path}")
        log.info(f"üåê YCLIENTS PARAMS: {params}")
        log.info(f"üåê YCLIENTS HEADERS: {dict(self.session.headers)}")
        
        r = self.session.get(f"{BASE}{path}", params=params, timeout=self.timeout)
        log.info(f"üåê YCLIENTS RESPONSE STATUS: {r.status_code}")
        log.info(f"üåê YCLIENTS RESPONSE HEADERS: {dict(r.headers)}")
        log.info(f"üåê YCLIENTS RESPONSE BODY: {r.text[:500]}...")
        
        return self._handle(r)

    def post(self, path: str, payload: Dict[str, Any]) -> Dict[str, Any]:
        import logging
        log = logging.getLogger()
        log.info(f"üåê YCLIENTS POST REQUEST: {BASE}{path}")
        log.info(f"üåê YCLIENTS PAYLOAD: {payload}")
        log.info(f"üåê YCLIENTS HEADERS: {dict(self.session.headers)}")
        
        r = self.session.post(f"{BASE}{path}", json=payload, timeout=self.timeout)
        log.info(f"üåê YCLIENTS RESPONSE STATUS: {r.status_code}")
        log.info(f"üåê YCLIENTS RESPONSE HEADERS: {dict(r.headers)}")
        log.info(f"üåê YCLIENTS RESPONSE BODY: {r.text[:500]}...")
        
        return self._handle(r)

    def put(self, path: str, payload: Dict[str, Any]) -> Dict[str, Any]:
        r = self.session.put(f"{BASE}{path}", json=payload, timeout=self.timeout)
        return self._handle(r)

    # --- —É–¥–æ–±–Ω—ã–µ –º–µ—Ç–æ–¥—ã ---
    def my_companies(self) -> Dict[str, Any]:
        return self.get("/companies/", params={"my": 1})

    def company_services(self, company_id: int) -> Dict[str, Any]:
        # —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥
        return self.get(f"/services/{company_id}")

    def company_masters(self, company_id: int) -> Dict[str, Any]:
        # —Å–ø–∏—Å–æ–∫ –º–∞—Å—Ç–µ—Ä–æ–≤
        return self.get(f"/staff/{company_id}")

    def company_records(self, company_id: int) -> Dict[str, Any]:
        # —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π –∫–æ–º–ø–∞–Ω–∏–∏
        return self.get(f"/records/{company_id}")

    def find_client_by_phone(self, company_id: int, phone: str) -> Dict[str, Any]:
        # –ø–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É (—Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–π —Ç–µ–ª–µ—Ñ–æ–Ω —Ç–∞–∫, –∫–∞–∫ —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ YClients)
        return self.get(f"/clients/{company_id}", params={"search": phone})

    def create_client(self, company_id: int, *, name: str, phone: str,
                      email: str = "", comment: str = "") -> Dict[str, Any]:
        payload = {
            "name": name,
            "phone": phone,
            "email": email,
            "comment": comment
        }
        return self.post(f"/clients/{company_id}", payload)

    def create_record(self, company_id: int, *,
                      service_id: int, staff_id: int,
                      date_time: str,  # "YYYY-MM-DD HH:MM"
                      client_id: Optional[int] = None,
                      client: Optional[Dict[str, Any]] = None,
                      comment: str = "", seance_length: Optional[int] = None) -> Dict[str, Any]:
        """
        date_time ‚Äî –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Ñ–∏–ª–∏–∞–ª–∞, —Ñ–æ—Ä–º–∞—Ç 'YYYY-MM-DD HH:MM'
        –ª–∏–±–æ –ø—Ä–æ–≤–µ—Ä—å –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏/–æ—Ç–≤–µ—Ç–µ –∫–æ–º–ø–∞–Ω–∏–∏ –µ—ë timezone_name –∏ –ø—Ä–∏–≤–æ–¥–∏ –≤—Ä–µ–º—è.
        """
        payload = {
            "staff_id": staff_id,
            "services": [{"id": service_id}],
            "datetime": date_time,
            "comment": comment
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ–∞–Ω—Å–∞ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞
        if seance_length:
            payload["seance_length"] = seance_length
        
        if client_id:
            # –ï—Å–ª–∏ –µ—Å—Ç—å client_id, —Å–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç client
            payload["client"] = {"id": client_id}
        elif client:
            # –ø—Ä–∏–º–µ—Ä client: {"name":"–ò–≤–∞–Ω", "phone":"+7999...", "email":"..."}
            payload["client"] = client
        else:
            raise ValueError("Either client_id or client object must be provided")
            
        return self.post(f"/records/{company_id}", payload)

    def delete_record(self, company_id: int, record_id: int) -> Dict[str, Any]:
        """–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å"""
        import logging
        log = logging.getLogger()
        log.info(f"üóëÔ∏è YCLIENTS DELETE REQUEST: {BASE}/record/{company_id}/{record_id}")
        
        r = self.session.delete(f"{BASE}/record/{company_id}/{record_id}", timeout=self.timeout)
        log.info(f"üóëÔ∏è YCLIENTS DELETE RESPONSE STATUS: {r.status_code}")
        log.info(f"üóëÔ∏è YCLIENTS DELETE RESPONSE BODY: {r.text[:500]}...")
        
        return self._handle(r)

    def update_record(self, company_id: int, record_id: int, **kwargs) -> Dict[str, Any]:
        """–ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å"""
        import logging
        log = logging.getLogger()
        log.info(f"‚úèÔ∏è YCLIENTS PUT REQUEST: {BASE}/record/{company_id}/{record_id}")
        log.info(f"‚úèÔ∏è YCLIENTS PUT PAYLOAD: {kwargs}")
        
        r = self.session.put(f"{BASE}/record/{company_id}/{record_id}", json=kwargs, timeout=self.timeout)
        log.info(f"‚úèÔ∏è YCLIENTS PUT RESPONSE STATUS: {r.status_code}")
        log.info(f"‚úèÔ∏è YCLIENTS PUT RESPONSE BODY: {r.text[:500]}...")
        
        return self._handle(r)

    # --- –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–ø–∏—Å—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
    def get_user_record(self, record_id: int, record_hash: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID –∏ —Ö–µ—à—É"""
        return self.get(f"/user/records/{record_id}/{record_hash}")

    def delete_user_record(self, record_id: int, record_hash: str) -> Dict[str, Any]:
        """–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return self.session.delete(f"{BASE}/user/records/{record_id}/{record_hash}", timeout=self.timeout)

    def send_phone_code(self, company_id: int, phone: str, fullname: str = "") -> Dict[str, Any]:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å SMS –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
        payload = {"phone": phone}
        if fullname:
            payload["fulname"] = fullname
        return self.post(f"/book_code/{company_id}", payload)

    def auth_by_phone_code(self, phone: str, code: str) -> Dict[str, Any]:
        """–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –∫–æ–¥—É"""
        payload = {"phone": phone, "code": code}
        return self.post("/user/auth", payload)

# ==== –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è ====
if __name__ == "__main__":
    PARTNER_TOKEN = "nudftdeweddp2n6g7hhw"  # —Ç–≤–æ–π —Ä–µ–∞–ª—å–Ω—ã–π –ø–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∏–π
    USER_TOKEN    = "652f770cc7224fda91f886b1efa7fe01"  # –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ /auth

    api = YClientsClient(PARTNER_TOKEN, USER_TOKEN)

    # 1) –ú–æ–∏ –∫–æ–º–ø–∞–Ω–∏–∏
    companies = api.my_companies()
    print("My companies:", companies["data"])

    # –í–æ–∑—å–º—ë–º –ø–µ—Ä–≤—É—é –∫–æ–º–ø–∞–Ω–∏—é
    company_id = companies["data"][0]["id"]

    # 2) –ú–∞—Å—Ç–µ—Ä–∞ –∏ —É—Å–ª—É–≥–∏
    masters  = api.company_masters(company_id)
    services = api.company_services(company_id)
    print("Masters count:", len(masters.get("data", [])))
    print("Services count:", len(services.get("data", [])))

    # 3) –ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
    found = api.find_client_by_phone(company_id, "79939554531")
    print("Found clients:", found.get("data", []))

    # 4) –°–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å (–ø—Ä–∏–º–µ—Ä ‚Äî –ø—Ä–æ–≤–µ—Ä—å —Ä–µ–∞–ª—å–Ω—ã–µ service_id/staff_id –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è!)
    # api.create_record(
    #     company_id,
    #     service_id=<SERVICE_ID>,
    #     staff_id=<MASTER_ID>,
    #     date_time="2025-10-28 12:30",
    #     client_id=found["data"][0]["id"] if found.get("data") else None,
    #     client=None if found.get("data") else {"name":"–ù–∞–¥–µ–∂–¥–∞","phone":"79939554531"},
    #     comment="–û–Ω–ª–∞–π–Ω –∑–∞–ø–∏—Å—å —Å —Å–∞–π—Ç–∞"
    # )
