# bot.py
import os
import re
import time
import logging
from collections import defaultdict, deque
from datetime import datetime, timezone, timedelta
from typing import Dict, Deque, List, Tuple

import requests
from dotenv import load_dotenv
from telegram import Update, Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    ContextTypes,
)

from yclients_client import YClientsClient, YClientsError

# ===================== LOAD .ENV ======================
load_dotenv()  # <-- loads variables from .env file

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
GROQ_API_KEY = os.getenv("GROQ_API_KEY")
YCLIENTS_PARTNER_TOKEN = os.getenv("YCLIENTS_PARTNER_TOKEN")
YCLIENTS_USER_TOKEN = os.getenv("YCLIENTS_USER_TOKEN")

# ===================== VALIDATION =====================
if not TELEGRAM_BOT_TOKEN:
    raise ValueError("Error: Missing TELEGRAM_BOT_TOKEN in .env")
if not GROQ_API_KEY:
    raise ValueError("Error: Missing GROQ_API_KEY in .env")
if not YCLIENTS_PARTNER_TOKEN:
    raise ValueError("Error: Missing YCLIENTS_PARTNER_TOKEN in .env")
if not YCLIENTS_USER_TOKEN:
    raise ValueError("Error: Missing YCLIENTS_USER_TOKEN in .env")

# ===================== CONFIG =========================
BASE = "https://api.groq.com/openai/v1/chat/completions"
MODEL = "openai/gpt-oss-120b"
MEMORY_TURNS = 6

# Initialize YClients client
yclients = YClientsClient(YCLIENTS_PARTNER_TOKEN, YCLIENTS_USER_TOKEN)

BOOKING_KEYWORDS = [
    "–∑–∞–ø–∏—Å—å", "–∑–∞–ø–∏—Å–∞—Ç—å—Å—è", "–∑–∞–ø–∏—Å–∞—Ç—å", "–∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å",
    "—É—Å–ª—É–≥–∞", "–º–∞—Å—Ç–µ—Ä", "–≤—Ä–µ–º—è", "–¥–∞—Ç–∞",
    "–∫–æ–≥–¥–∞ –º–æ–∂–Ω–æ", "—Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è", "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ",
    "–∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞", "—Ö–æ—á—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è", "–Ω—É–∂–Ω–∞ –∑–∞–ø–∏—Å—å",
    "–º–∞–Ω–∏–∫—é—Ä", "–ø–µ–¥–∏–∫—é—Ä", "–º–∞—Å—Å–∞–∂",  # nazwy us≈Çug
    "–∞—Ä–∏–Ω–∞", "–µ–∫–∞—Ç–µ—Ä–∏–Ω–∞", "–ø–æ–ª–∏–Ω–∞", "–∫–∞—Ç—è", "–∫–∞—Ç—é—à–∞",  # imiona master√≥w
    "–æ–∫—Ç—è–±—Ä—è", "–Ω–æ—è–±—Ä—è", "–¥–µ–∫–∞–±—Ä—è", "—è–Ω–≤–∞—Ä—è", "—Ñ–µ–≤—Ä–∞–ª—è", "–º–∞—Ä—Ç–∞", "–∞–ø—Ä–µ–ª—è", "–º–∞—è", "–∏—é–Ω—è", "–∏—é–ª—è", "–∞–≤–≥—É—Å—Ç–∞", "—Å–µ–Ω—Ç—è–±—Ä—è",  # miesiƒÖce
    ":", "—á–∞—Å–æ–≤", "–≤ ", "–Ω–∞ "  # czas
]

BOOKING_PROMPT = """
–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∑–∞–ø–∏—Å–∏ –∫ –º–∞—Å—Ç–µ—Ä–∞–º. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –í–°–Æ –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –∏ –æ–ø—Ä–µ–¥–µ–ª–∏:
1. –ö–∞–∫–∞—è —É—Å–ª—É–≥–∞ –Ω—É–∂–Ω–∞
2. –ï—Å—Ç—å –ª–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ –º–∞—Å—Ç–µ—Ä—É
3. –ñ–µ–ª–∞–µ–º–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è

–ò—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞:
{{history}}

–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:
{{api_data}}

–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {{message}}

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: 
- –ï—Å–ª–∏ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å–ª—É–≥–µ, –º–∞—Å—Ç–µ—Ä–µ –∏ –≤—Ä–µ–º–µ–Ω–∏ - –°–û–ó–î–ê–ô –ó–ê–ü–ò–°–¨
- –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø–∏—à–µ—Ç "—Ö–æ—á—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è" - –ø—Ä–æ–≤–µ—Ä—å –∏—Å—Ç–æ—Ä–∏—é –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
- –ï—Å–ª–∏ –µ—Å—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ (—É—Å–ª—É–≥–∞, –º–∞—Å—Ç–µ—Ä, –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è) - –æ—Ç–≤–µ—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
–ó–ê–ü–ò–°–¨: [—É—Å–ª—É–≥–∞] | [–º–∞—Å—Ç–µ—Ä] | [–¥–∞—Ç–∞ –≤—Ä–µ–º—è]

–ù–∞–ø—Ä–∏–º–µ—Ä: –ó–ê–ü–ò–°–¨: –º–∞–Ω–∏–∫—é—Ä | –ê—Ä–∏–Ω–∞ | 2025-10-26 12:00

–ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, —É—Ç–æ—á–Ω–∏ –Ω–µ–¥–æ—Å—Ç–∞—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.
"""

CHAT_PROMPT = """
–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –Ω–∞ —Ä—É—Å—Å–∫–æ–º.
–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞:
{{history}}

–°–æ–æ–±—â–µ–Ω–∏–µ:
{{message}}
–û—Ç–≤–µ—Ç—å –∫—Ä–∞—Ç–∫–æ –ø–æ –¥–µ–ª—É.
"""

# ===================== LOGGING ========================
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(message)s")
log = logging.getLogger()

# ===================== MEMORY =========================
UserMemory: Dict[int, Deque] = defaultdict(lambda: deque(maxlen=MEMORY_TURNS * 2))
UserRecords: Dict[int, List[Dict]] = defaultdict(list)  # –•—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–ø–∏—Å–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
UserAuth: Dict[int, Dict] = defaultdict(dict)  # –î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
UserPhone: Dict[int, str] = {}  # –ù–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

def add_memory(user_id, role, text):
    UserMemory[user_id].append((role, text))

def get_history(user_id):
    return "\n".join([f"{r}: {t}" for r, t in UserMemory[user_id]])

# ===================== NLP ============================
def is_booking(text):
    text_lower = text.lower()
    matches = [k for k in BOOKING_KEYWORDS if k in text_lower]
    log.info(f"üîç BOOKING CHECK: '{text}' -> matches: {matches}")
    return len(matches) > 0

def groq_chat(messages):
    headers = {"Authorization": f"Bearer {GROQ_API_KEY}", "Content-Type": "application/json"}
    data = {
        "model": MODEL,
        "messages": messages,
        "max_tokens": 500,
        "temperature": 0.4
    }
    r = requests.post(BASE, json=data, headers=headers)
    return r.json()["choices"][0]["message"]["content"]

# ===================== YCLIENTS INTEGRATION ===========
def get_company_id():
    """Get the first available company ID"""
    log.info("üè¢ API CALL: Getting companies from YClients...")
    try:
        companies = yclients.my_companies()
        log.info(f"üè¢ API RESPONSE: {companies}")
        if companies.get("data") and len(companies["data"]) > 0:
            company_id = companies["data"][0]["id"]
            log.info(f"‚úÖ Company ID found: {company_id}")
            return company_id
        log.warning("‚ö†Ô∏è No companies found in response")
        return None
    except YClientsError as e:
        log.error(f"‚ùå YClients API Error getting company: {e}")
        return None
    except Exception as e:
        log.error(f"‚ùå General Error getting company: {e}")
        return None

def get_services():
    """Get available services"""
    log.info("üìã API CALL: Getting services from YClients...")
    try:
        company_id = get_company_id()
        if not company_id:
            log.warning("‚ö†Ô∏è No company ID, cannot get services")
            return []
        log.info(f"üìã Getting services for company ID: {company_id}")
        services = yclients.company_services(company_id)
        log.info(f"üìã API RESPONSE: {services}")
        services_data = services.get("data", [])
        log.info(f"‚úÖ Found {len(services_data)} services")
        return services_data
    except YClientsError as e:
        log.error(f"‚ùå YClients API Error getting services: {e}")
        return []
    except Exception as e:
        log.error(f"‚ùå General Error getting services: {e}")
        return []

def get_services_with_prices(company_id: int) -> List[Dict]:
    """–ü–æ–ª—É—á–∏—Ç—å —É—Å–ª—É–≥–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏"""
    try:
        log.info(f"üí∞ Getting services with prices for company ID: {company_id}")
        response = yclients.get_service_details(company_id)
        
        if response.get("success"):
            services = response.get("data", [])
            log.info(f"üí∞ Found {len(services)} services with prices")
            return services
        else:
            log.error(f"‚ùå Failed to get services with prices: {response}")
            return []
    except Exception as e:
        log.error(f"‚ùå Error getting services with prices: {e}")
        return []

def get_services_for_master(company_id: int, staff_id: int) -> List[Dict]:
    """–ü–æ–ª—É—á–∏—Ç—å —É—Å–ª—É–≥–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞ —Å —Ü–µ–Ω–∞–º–∏"""
    try:
        log.info(f"üë§ Getting services for master ID: {staff_id}")
        response = yclients.get_service_details(company_id, staff_id=staff_id)
        
        if response.get("success"):
            services = response.get("data", [])
            log.info(f"üë§ Found {len(services)} services for master {staff_id}")
            return services
        else:
            log.error(f"‚ùå Failed to get services for master: {response}")
            return []
    except Exception as e:
        log.error(f"‚ùå Error getting services for master: {e}")
        return []

def get_masters():
    """Get available masters"""
    log.info("üë• API CALL: Getting masters from YClients...")
    try:
        company_id = get_company_id()
        if not company_id:
            log.warning("‚ö†Ô∏è No company ID, cannot get masters")
            return []
        log.info(f"üë• Getting masters for company ID: {company_id}")
        masters = yclients.company_masters(company_id)
        log.info(f"üë• API RESPONSE: {masters}")
        masters_data = masters.get("data", [])
        log.info(f"‚úÖ Found {len(masters_data)} masters")
        return masters_data
    except YClientsError as e:
        log.error(f"‚ùå YClients API Error getting masters: {e}")
        return []
    except Exception as e:
        log.error(f"‚ùå General Error getting masters: {e}")
        return []

def get_api_data_for_ai():
    """Get formatted API data for AI responses"""
    try:
        company_id = get_company_id()
        if not company_id:
            return "–î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
            
        # –ü–æ–ª—É—á–∞–µ–º —É—Å–ª—É–≥–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏
        services = get_services_with_prices(company_id)
        masters = get_masters()
        
        data_text = "–î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å–ª—É–≥–∏:\n"
        for service in services[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 —É—Å–ª—É–≥
            name = service.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
            cost = service.get("cost", 0)
            price_min = service.get("price_min", 0)
            price_max = service.get("price_max", 0)
            duration = service.get("length", 0)
            
            data_text += f"- {name}"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã
            if cost > 0:
                data_text += f" ({cost} —Ä—É–±.)"
            elif price_min > 0 and price_max > 0:
                if price_min == price_max:
                    data_text += f" ({price_min} —Ä—É–±.)"
                else:
                    data_text += f" ({price_min}-{price_max} —Ä—É–±.)"
            elif price_min > 0:
                data_text += f" (–æ—Ç {price_min} —Ä—É–±.)"
                
            if duration > 0:
                data_text += f" ({duration} –º–∏–Ω)"
            data_text += "\n"
        
        data_text += "\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞—Å—Ç–µ—Ä–∞:\n"
        for master in masters[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 5 –º–∞—Å—Ç–µ—Ä–æ–≤
            name = master.get("name", "–ë–µ–∑ –∏–º–µ–Ω–∏")
            specialization = master.get("specialization", "")
            data_text += f"- {name}"
            if specialization:
                data_text += f" ({specialization})"
            data_text += "\n"
        
        return data_text
    except Exception as e:
        log.error(f"Error getting API data: {e}")
        return "–î–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"

# ===================== NLP PARSING ==================
def init_fuzzy_matcher():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ—á–µ—Ç–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞"""
    try:
        from fuzzywuzzy import fuzz, process
        return True
    except ImportError:
        log.warning("fuzzywuzzy not available, using basic parsing")
        return False

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ fuzzywuzzy
fuzzy_available = init_fuzzy_matcher()

def find_best_match(word: str, choices: list, threshold: int = 80) -> str:
    """–ù–∞—Ö–æ–¥–∏—Ç –ª—É—á—à–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –Ω–µ—á–µ—Ç–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞"""
    if not fuzzy_available:
        return None
    
    try:
        from fuzzywuzzy import process
        result = process.extractOne(word, choices, scorer=fuzz.ratio)
        if result and result[1] >= threshold:
            return result[0]
    except Exception as e:
        log.debug(f"Error in fuzzy matching '{word}': {e}")
    
    return None

def find_service_advanced(message: str) -> str:
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ø–æ–∏—Å–∫ —É—Å–ª—É–≥–∏ —Å regex –∏ –Ω–µ—á–µ—Ç–∫–∏–º –ø–æ–∏—Å–∫–æ–º"""
    message_lower = message.lower()
    
    # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —É—Å–ª—É–≥ —Å regex –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏
    service_patterns = {
        "–º–∞–Ω–∏–∫—é—Ä": [
            r'\b–º–∞–Ω–∏–∫—é—Ä\w*\b',  # –º–∞–Ω–∏–∫—é—Ä, –º–∞–Ω–∏–∫—é—Ä–∞, –º–∞–Ω–∏–∫—é—Ä—É, –º–∞–Ω–∏–∫—é—Ä–æ–º, –º–∞–Ω–∏–∫—é—Ä–µ
            r'\b–º–∞–Ω–∏–∫—é—Ä–Ω\w*\b',  # –º–∞–Ω–∏–∫—é—Ä–Ω—ã–π, –º–∞–Ω–∏–∫—é—Ä–Ω–∞—è, –º–∞–Ω–∏–∫—é—Ä–Ω–æ–µ
            r'\b–º–∞–Ω–∏–∫\w*\b',     # –º–∞–Ω–∏–∫, –º–∞–Ω–∏–∫–∞ (—Å–æ–∫—Ä–∞—â–µ–Ω–∏—è)
        ],
        "–ø–µ–¥–∏–∫—é—Ä": [
            r'\b–ø–µ–¥–∏–∫—é—Ä\w*\b',  # –ø–µ–¥–∏–∫—é—Ä, –ø–µ–¥–∏–∫—é—Ä–∞, –ø–µ–¥–∏–∫—é—Ä—É, –ø–µ–¥–∏–∫—é—Ä–æ–º, –ø–µ–¥–∏–∫—é—Ä–µ
            r'\b–ø–µ–¥–∏–∫—é—Ä–Ω\w*\b',  # –ø–µ–¥–∏–∫—é—Ä–Ω—ã–π, –ø–µ–¥–∏–∫—é—Ä–Ω–∞—è, –ø–µ–¥–∏–∫—é—Ä–Ω–æ–µ
            r'\b–ø–µ–¥–∏–∫\w*\b',     # –ø–µ–¥–∏–∫, –ø–µ–¥–∏–∫–∞ (—Å–æ–∫—Ä–∞—â–µ–Ω–∏—è)
        ],
        "–º–∞—Å—Å–∞–∂": [
            r'\b–º–∞—Å—Å–∞–∂\w*\b',   # –º–∞—Å—Å–∞–∂, –º–∞—Å—Å–∞–∂–∞, –º–∞—Å—Å–∞–∂—É, –º–∞—Å—Å–∞–∂–µ–º, –º–∞—Å—Å–∞–∂–µ
            r'\b–º–∞—Å—Å–∞–∂–Ω\w*\b',   # –º–∞—Å—Å–∞–∂–Ω—ã–π, –º–∞—Å—Å–∞–∂–Ω–∞—è, –º–∞—Å—Å–∞–∂–Ω–æ–µ
            r'\b–º–∞—Å–∞–∂\w*\b',     # –º–∞—Å–∞–∂, –º–∞—Å–∞–∂–∞ (–æ–ø–µ—á–∞—Ç–∫–∏)
            r'\b–º–∞—Å\w*–∂\w*\b',   # –º–∞—Å*–∂ (–æ–ø–µ—á–∞—Ç–∫–∏)
        ]
    }
    
    # –ò—â–µ–º –ø–æ regex –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
    for service, patterns in service_patterns.items():
        for pattern in patterns:
            if re.search(pattern, message_lower):
                return service
    
    # Fallback –∫ –Ω–µ—á–µ—Ç–∫–æ–º—É –ø–æ–∏—Å–∫—É
    service_variants = {
        "–º–∞–Ω–∏–∫—é—Ä": ["–º–∞–Ω–∏–∫—é—Ä", "–º–∞–Ω–∏–∫—é—Ä–∞", "–º–∞–Ω–∏–∫—é—Ä—É", "–º–∞–Ω–∏–∫—é—Ä–æ–º", "–º–∞–Ω–∏–∫—é—Ä–µ", "–º–∞–Ω–∏–∫—é—Ä–Ω—ã–π", "–º–∞–Ω–∏–∫—é—Ä–Ω–∞—è", "–º–∞–Ω–∏–∫", "–º–∞–Ω–∏–∫–∞"],
        "–ø–µ–¥–∏–∫—é—Ä": ["–ø–µ–¥–∏–∫—é—Ä", "–ø–µ–¥–∏–∫—é—Ä–∞", "–ø–µ–¥–∏–∫—é—Ä—É", "–ø–µ–¥–∏–∫—é—Ä–æ–º", "–ø–µ–¥–∏–∫—é—Ä–µ", "–ø–µ–¥–∏–∫—é—Ä–Ω—ã–π", "–ø–µ–¥–∏–∫—é—Ä–Ω–∞—è", "–ø–µ–¥–∏–∫", "–ø–µ–¥–∏–∫–∞"],
        "–º–∞—Å—Å–∞–∂": ["–º–∞—Å—Å–∞–∂", "–º–∞—Å—Å–∞–∂–∞", "–º–∞—Å—Å–∞–∂—É", "–º–∞—Å—Å–∞–∂–µ–º", "–º–∞—Å—Å–∞–∂–µ", "–º–∞—Å–∞–∂", "–º–∞—Å–∞–∂–∞", "–º–∞—Å—Å–∞–∂–Ω—ã–π", "–º–∞—Å—Å–∞–∂–Ω–∞—è"]
    }
    
    # –ù–µ—á–µ—Ç–∫–∏–π –ø–æ–∏—Å–∫ –ø–æ —Å–ª–æ–≤–∞–º
    words = message_lower.split()
    for word in words:
        all_variants = []
        for variants in service_variants.values():
            all_variants.extend(variants)
        
        best_match = find_best_match(word, all_variants, threshold=70)
        if best_match:
            for service, variants in service_variants.items():
                if best_match in variants:
                    return service
    
    return None

def find_master_advanced(message: str) -> str:
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ø–æ–∏—Å–∫ –º–∞—Å—Ç–µ—Ä–∞ —Å regex –∏ –Ω–µ—á–µ—Ç–∫–∏–º –ø–æ–∏—Å–∫–æ–º"""
    message_lower = message.lower()
    
    # Regex –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∏–º–µ–Ω –º–∞—Å—Ç–µ—Ä–æ–≤
    master_patterns = {
        "–∞—Ä–∏–Ω–∞": [
            r'\b–∞—Ä–∏–Ω\w*\b',      # –∞—Ä–∏–Ω–∞, –∞—Ä–∏–Ω—ã, –∞—Ä–∏–Ω–µ, –∞—Ä–∏–Ω—É, –∞—Ä–∏–Ω–æ–π
            r'\b–∞—Ä–∏–Ω–∫\w*\b',     # –∞—Ä–∏–Ω–∫–∞, –∞—Ä–∏–Ω–æ—á–∫–∞
        ],
        "–µ–∫–∞—Ç–µ—Ä–∏–Ω–∞": [
            r'\b–µ–∫–∞—Ç–µ—Ä–∏–Ω\w*\b',  # –µ–∫–∞—Ç–µ—Ä–∏–Ω–∞, –µ–∫–∞—Ç–µ—Ä–∏–Ω—ã, –µ–∫–∞—Ç–µ—Ä–∏–Ω–µ, –µ–∫–∞—Ç–µ—Ä–∏–Ω—É, –µ–∫–∞—Ç–µ—Ä–∏–Ω–æ–π
            r'\b–∫–∞—Ç\w*\b',       # –∫–∞—Ç—è, –∫–∞—Ç–∏, –∫–∞—Ç–µ, –∫–∞—Ç—é, –∫–∞—Ç–µ–π, –∫–∞—Ç–µ–Ω—å–∫–∞
            r'\b–∫–∞—Ç—é—à\w*\b',     # –∫–∞—Ç—é—à–∞, –∫–∞—Ç—é—à–∏, –∫–∞—Ç—é—à–µ, –∫–∞—Ç—é—à—É, –∫–∞—Ç—é—à–µ–π, –∫–∞—Ç—é—à–∫–∞
        ],
        "–ø–æ–ª–∏–Ω–∞": [
            r'\b–ø–æ–ª–∏–Ω\w*\b',     # –ø–æ–ª–∏–Ω–∞, –ø–æ–ª–∏–Ω—ã, –ø–æ–ª–∏–Ω–µ, –ø–æ–ª–∏–Ω—É, –ø–æ–ª–∏–Ω–æ–π
            r'\b–ø–æ–ª–∏–Ω–∫\w*\b',    # –ø–æ–ª–∏–Ω–∫–∞, –ø–æ–ª–∏–Ω–æ—á–∫–∞
        ]
    }
    
    # –ò—â–µ–º –ø–æ regex –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
    for master, patterns in master_patterns.items():
        for pattern in patterns:
            if re.search(pattern, message_lower):
                return master.title()
    
    # Fallback –∫ –Ω–µ—á–µ—Ç–∫–æ–º—É –ø–æ–∏—Å–∫—É
    master_variants = {
        "–∞—Ä–∏–Ω–∞": ["–∞—Ä–∏–Ω–∞", "–∞—Ä–∏–Ω—ã", "–∞—Ä–∏–Ω–µ", "–∞—Ä–∏–Ω—É", "–∞—Ä–∏–Ω–æ–π", "–∞—Ä–∏–Ω–∫–∞", "–∞—Ä–∏–Ω–æ—á–∫–∞"],
        "–µ–∫–∞—Ç–µ—Ä–∏–Ω–∞": ["–µ–∫–∞—Ç–µ—Ä–∏–Ω–∞", "–µ–∫–∞—Ç–µ—Ä–∏–Ω—ã", "–µ–∫–∞—Ç–µ—Ä–∏–Ω–µ", "–µ–∫–∞—Ç–µ—Ä–∏–Ω—É", "–µ–∫–∞—Ç–µ—Ä–∏–Ω–æ–π", "–∫–∞—Ç—è", "–∫–∞—Ç–∏", "–∫–∞—Ç–µ", "–∫–∞—Ç—é", "–∫–∞—Ç–µ–π", "–∫–∞—Ç—é—à–∞", "–∫–∞—Ç—é—à–∏", "–∫–∞—Ç—é—à–µ", "–∫–∞—Ç—é—à—É", "–∫–∞—Ç—é—à–µ–π", "–∫–∞—Ç–µ–Ω—å–∫–∞", "–∫–∞—Ç—é—à–∫–∞"],
        "–ø–æ–ª–∏–Ω–∞": ["–ø–æ–ª–∏–Ω–∞", "–ø–æ–ª–∏–Ω—ã", "–ø–æ–ª–∏–Ω–µ", "–ø–æ–ª–∏–Ω—É", "–ø–æ–ª–∏–Ω–æ–π", "–ø–æ–ª–∏–Ω–∫–∞", "–ø–æ–ª–∏–Ω–æ—á–∫–∞"]
    }
    
    # –ù–µ—á–µ—Ç–∫–∏–π –ø–æ–∏—Å–∫ –ø–æ —Å–ª–æ–≤–∞–º
    words = message_lower.split()
    for word in words:
        all_variants = []
        for variants in master_variants.values():
            all_variants.extend(variants)
        
        best_match = find_best_match(word, all_variants, threshold=75)
        if best_match:
            for master, variants in master_variants.items():
                if best_match in variants:
                    return master.title()
    
    return None

def parse_booking_message(message: str, history: str) -> Dict:
    """–ü–∞—Ä—Å–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–∏—Å–∏"""
    import re
    from datetime import datetime, timedelta
    
    result = {
        "service": None,
        "master": None,
        "datetime": None,
        "has_all_info": False
    }
    
    # –°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ –¥–ª—è –ø–æ–∏—Å–∫–∞
    services = [
        "–º–∞–Ω–∏–∫—é—Ä —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º –≥–µ–ª—å-–ª–∞–∫", "–º–∞–Ω–∏–∫—é—Ä", "–ø–µ–¥–∏–∫—é—Ä —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º –≥–µ–ª—å-–ª–∞–∫", 
        "–ø–µ–¥–∏–∫—é—Ä", "–º–∞—Å—Å–∞–∂ –æ–∑–¥–æ—Ä–æ–≤–∏—Ç–µ–ª—å–Ω—ã–π", "–º–∞—Å—Å–∞–∂", "–º–∞–Ω–∏–∫—é—Ä –≤ 4 —Ä—É–∫–∏", 
        "–ø–µ–¥–∏–∫—é—Ä –≤ 4 —Ä—É–∫–∏"
    ]
    
    # –°–ø–∏—Å–æ–∫ –º–∞—Å—Ç–µ—Ä–æ–≤
    masters = ["–∞—Ä–∏–Ω–∞", "–µ–∫–∞—Ç–µ—Ä–∏–Ω–∞", "–ø–æ–ª–∏–Ω–∞", "–∫–∞—Ç—è", "–∫–∞—Ç—é—à–∞"]
    
    message_lower = message.lower()
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ø–æ–∏—Å–∫ —É—Å–ª—É–≥
    result["service"] = find_service_advanced(message)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ø–æ–∏—Å–∫ –º–∞—Å—Ç–µ—Ä–æ–≤
    result["master"] = find_master_advanced(message)
    
    # Fallback –∫ —Å—Ç–∞—Ä–æ–º—É –º–µ—Ç–æ–¥—É –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
    if not result["service"]:
        for service in services:
            if service.lower() in message_lower:
                result["service"] = service
                break
    
    if not result["master"]:
        for master in masters:
            if master in message_lower:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è
                if master in ["–∞—Ä–∏–Ω–∞"]:
                    result["master"] = "–ê—Ä–∏–Ω–∞"
                elif master in ["–µ–∫–∞—Ç–µ—Ä–∏–Ω–∞", "–∫–∞—Ç—è", "–∫–∞—Ç—é—à–∞"]:
                    result["master"] = "–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞"
                elif master in ["–ø–æ–ª–∏–Ω–∞"]:
                    result["master"] = "–ü–æ–ª–∏–Ω–∞"
                break
    
    # –ò—â–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
    time_patterns = [
        r'(\d{1,2}):(\d{2})',  # 12:00, 9:30
        r'(\d{1,2})\s*—á–∞—Å–æ–≤',  # 12 —á–∞—Å–æ–≤
        r'–≤\s*(\d{1,2}):(\d{2})',  # –≤ 12:00
        r'–Ω–∞\s*(\d{1,2}):(\d{2})',  # –Ω–∞ 12:00
    ]
    
    # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥–∞—Ç—ã
    date_patterns = [
        # –¢–æ—á–Ω—ã–µ –¥–∞—Ç—ã —Å –º–µ—Å—è—Ü–∞–º–∏
        r'(\d{1,2})\s*–æ–∫—Ç—è–±—Ä—è',  # 26 –æ–∫—Ç—è–±—Ä—è
        r'(\d{1,2})\s*–Ω–æ—è–±—Ä—è',   # 26 –Ω–æ—è–±—Ä—è
        r'(\d{1,2})\s*–¥–µ–∫–∞–±—Ä—è',  # 26 –¥–µ–∫–∞–±—Ä—è
        r'(\d{1,2})\s*—è–Ω–≤–∞—Ä—è',   # 26 —è–Ω–≤–∞—Ä—è
        r'(\d{1,2})\s*—Ñ–µ–≤—Ä–∞–ª—è',  # 26 —Ñ–µ–≤—Ä–∞–ª—è
        r'(\d{1,2})\s*–º–∞—Ä—Ç–∞',    # 26 –º–∞—Ä—Ç–∞
        r'(\d{1,2})\s*–∞–ø—Ä–µ–ª—è',   # 26 –∞–ø—Ä–µ–ª—è
        r'(\d{1,2})\s*–º–∞—è',      # 26 –º–∞—è
        r'(\d{1,2})\s*–∏—é–Ω—è',     # 26 –∏—é–Ω—è
        r'(\d{1,2})\s*–∏—é–ª—è',     # 26 –∏—é–ª—è
        r'(\d{1,2})\s*–∞–≤–≥—É—Å—Ç–∞',  # 26 –∞–≤–≥—É—Å—Ç–∞
        r'(\d{1,2})\s*—Å–µ–Ω—Ç—è–±—Ä—è', # 26 —Å–µ–Ω—Ç—è–±—Ä—è
        
        # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞—Ç—ã
        r'\b–∑–∞–≤—Ç—Ä–∞\b',           # –∑–∞–≤—Ç—Ä–∞
        r'\b–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞\b',      # –ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞
        r'\b—Å–µ–≥–æ–¥–Ω—è\b',          # —Å–µ–≥–æ–¥–Ω—è
        
        # –î–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM –∏–ª–∏ DD/MM
        r'(\d{1,2})[./](\d{1,2})',  # 26.10 –∏–ª–∏ 26/10
        
        # –î–∞—Ç—ã —Å –≥–æ–¥–∞–º–∏
        r'(\d{1,2})[./](\d{1,2})[./](\d{4})',  # 26.10.2025
    ]
    
    # –ò—â–µ–º –≤—Ä–µ–º—è
    time_match = None
    for pattern in time_patterns:
        match = re.search(pattern, message_lower)
        if match:
            if len(match.groups()) == 2:
                hour, minute = match.groups()
                time_match = f"{hour.zfill(2)}:{minute.zfill(2)}"
            else:
                hour = match.group(1)
                time_match = f"{hour.zfill(2)}:00"
            break
    
    # –ò—â–µ–º –¥–∞—Ç—É
    date_match = None
    month_map = {
        '—è–Ω–≤–∞—Ä—è': '01', '—Ñ–µ–≤—Ä–∞–ª—è': '02', '–º–∞—Ä—Ç–∞': '03', '–∞–ø—Ä–µ–ª—è': '04',
        '–º–∞—è': '05', '–∏—é–Ω—è': '06', '–∏—é–ª—è': '07', '–∞–≤–≥—É—Å—Ç–∞': '08',
        '—Å–µ–Ω—Ç—è–±—Ä—è': '09', '–æ–∫—Ç—è–±—Ä—è': '10', '–Ω–æ—è–±—Ä—è': '11', '–¥–µ–∫–∞–±—Ä—è': '12'
    }
    
    for pattern in date_patterns:
        match = re.search(pattern, message_lower)
        if match:
            if pattern == r'\b–∑–∞–≤—Ç—Ä–∞\b':
                # –ó–∞–≤—Ç—Ä–∞
                tomorrow = datetime.now() + timedelta(days=1)
                date_match = tomorrow.strftime("%Y-%m-%d")
            elif pattern == r'\b–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞\b':
                # –ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞
                day_after_tomorrow = datetime.now() + timedelta(days=2)
                date_match = day_after_tomorrow.strftime("%Y-%m-%d")
            elif pattern == r'\b—Å–µ–≥–æ–¥–Ω—è\b':
                # –°–µ–≥–æ–¥–Ω—è
                today = datetime.now()
                date_match = today.strftime("%Y-%m-%d")
            elif pattern == r'(\d{1,2})[./](\d{1,2})[./](\d{4})':
                # DD.MM.YYYY –∏–ª–∏ DD/MM/YYYY
                day, month, year = match.groups()
                date_match = f"{year}-{month.zfill(2)}-{day.zfill(2)}"
            elif pattern == r'(\d{1,2})[./](\d{1,2})':
                # DD.MM –∏–ª–∏ DD/MM (—Ç–µ–∫—É—â–∏–π –≥–æ–¥)
                day, month = match.groups()
                current_year = datetime.now().year
                date_match = f"{current_year}-{month.zfill(2)}-{day.zfill(2)}"
            else:
                # –ú–µ—Å—è—Ü—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
                day = match.group(1)
                month_name = pattern.split(r'\s*')[1].replace(')', '')
                month = month_map.get(month_name, '10')  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ–∫—Ç—è–±—Ä—å
                current_year = datetime.now().year
                date_match = f"{current_year}-{month}-{day.zfill(2)}"
            break
    
    # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –∏ –≤—Ä–µ–º—è –∏ –¥–∞—Ç—É, —Ñ–æ—Ä–º–∏—Ä—É–µ–º datetime
    if time_match and date_match:
        result["datetime"] = f"{date_match} {time_match}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    result["has_all_info"] = all([result["service"], result["master"], result["datetime"]])
    
    return result

def get_recent_history(user_id: int, limit: int = 50) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏"""
    if user_id not in UserMemory:
        return ""
    
    messages = UserMemory[user_id]
    recent_messages = messages[-limit:] if len(messages) > limit else messages
    
    history_text = ""
    for msg in recent_messages:
        # msg is a tuple (role, text)
        if isinstance(msg, tuple) and len(msg) == 2:
            role, content = msg
            history_text += f"{role}: {content}\n"
        else:
            # Fallback for dictionary format
            role = msg.get("role", "user") if isinstance(msg, dict) else "user"
            content = msg.get("content", "") if isinstance(msg, dict) else str(msg)
            history_text += f"{role}: {content}\n"
    
    return history_text

def create_booking_from_parsed_data(user_id: int, parsed_data: Dict, client_name: str = "", client_phone: str = "") -> Dict:
    """–°–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    try:
        log.info(f"üîç PARSED DATA: {parsed_data}")
        
        if not parsed_data["has_all_info"]:
            raise Exception("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏")
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é –∑–∞–ø–∏—Å—å
        booking_record = create_real_booking(
            user_id,
            parsed_data["service"],
            parsed_data["master"],
            parsed_data["datetime"],
            client_name=client_name,
            client_phone=client_phone
        )
        
        return booking_record
        
    except Exception as e:
        log.error(f"Error creating booking from parsed data: {e}")
        raise e

# ===================== USER RECORDS ==================
def format_user_record(record: Dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    try:
        services = record.get("services", [])
        staff = record.get("staff", {})
        company = record.get("company", {})
        
        text = f"üìÖ *{record.get('date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}*\n"
        text += f"‚è∞ {record.get('datetime', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        text += f"üë§ –ú–∞—Å—Ç–µ—Ä: *{staff.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}*\n"
        text += f"üè¢ {company.get('title', '–°–∞–ª–æ–Ω')}\n"
        
        if services:
            text += "üõç *–£—Å–ª—É–≥–∏:*\n"
            for service in services:
                name = service.get("title", "–£—Å–ª—É–≥–∞")
                cost = service.get("cost", 0)
                if cost > 0:
                    text += f"  ‚Ä¢ {name} - {cost} ‚ÇΩ\n"
                else:
                    text += f"  ‚Ä¢ {name}\n"
        
        if record.get("comment"):
            text += f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {record.get('comment')}\n"
        
        status_map = {
            2: "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞",
            1: "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∞", 
            0: "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ",
            -1: "‚ùå –ù–µ –ø—Ä–∏—à–µ–ª"
        }
        status = record.get("visit_attendance", 0)
        text += f"üìä –°—Ç–∞—Ç—É—Å: {status_map.get(status, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        
        return text
    except Exception as e:
        log.error(f"Error formatting record: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏"

def get_user_records(user_id: int) -> List[Dict]:
    """–ü–æ–ª—É—á–∏—Ç—å –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return UserRecords.get(user_id, [])

def add_user_record(user_id: int, record: Dict):
    """–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    UserRecords[user_id].append(record)

def remove_user_record(user_id: int, record_id: int):
    """–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    UserRecords[user_id] = [r for r in UserRecords[user_id] if r.get("id") != record_id]

def create_real_booking(user_id: int, service_name: str, master_name: str, date_time: str, client_name: str = "", client_phone: str = "") -> Dict:
    """–°–æ–∑–¥–∞—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –∑–∞–ø–∏—Å—å —á–µ—Ä–µ–∑ YClients API"""
    log.info(f"üöÄ STARTING REAL BOOKING: user_id={user_id}, service='{service_name}', master='{master_name}', datetime='{date_time}'")
    
    try:
        log.info("üìû Getting company ID...")
        company_id = get_company_id()
        if not company_id:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –∫–æ–º–ø–∞–Ω–∏–∏")
        log.info(f"‚úÖ Company ID: {company_id}")
        
        # –ù–∞—Ö–æ–¥–∏–º —É—Å–ª—É–≥—É –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        log.info("üîç Searching for service...")
        services = get_services()
        log.info(f"üìã Available services: {[s.get('title', 'Unknown') for s in services[:3]]}")
        
        service = None
        for s in services:
            if service_name.lower() in s.get("title", "").lower():
                service = s
                break
        
        if not service:
            log.error(f"‚ùå Service '{service_name}' not found")
            raise Exception(f"–£—Å–ª—É–≥–∞ '{service_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        log.info(f"‚úÖ Found service: {service.get('title')} (ID: {service.get('id')})")
        
        # –ù–∞—Ö–æ–¥–∏–º –º–∞—Å—Ç–µ—Ä–∞ –ø–æ –∏–º–µ–Ω–∏
        log.info("üë• Searching for master...")
        masters = get_masters()
        log.info(f"üë• Available masters: {[m.get('name', 'Unknown') for m in masters[:3]]}")
        
        master = None
        for m in masters:
            if master_name.lower() in m.get("name", "").lower():
                master = m
                break
        
        if not master:
            log.error(f"‚ùå Master '{master_name}' not found")
            raise Exception(f"–ú–∞—Å—Ç–µ—Ä '{master_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
        log.info(f"‚úÖ Found master: {master.get('name')} (ID: {master.get('id')})")
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        client_id = None
        if client_phone:
            log.info(f"üì± Processing client with phone: {client_phone}")
            try:
                # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
                log.info("üîç Searching for existing client...")
                existing_clients = yclients.find_client_by_phone(company_id, client_phone)
                log.info(f"üìû Client search result: {existing_clients}")
                
                if existing_clients.get("data"):
                    client_id = existing_clients["data"][0]["id"]
                    log.info(f"‚úÖ Found existing client ID: {client_id}")
            except Exception as e:
                log.error(f"‚ùå Error searching for client: {e}")
            
            # –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ
            if not client_id:
                try:
                    log.info("üë§ Creating new client...")
                    new_client = yclients.create_client(
                        company_id,
                        name=client_name or "–ö–ª–∏–µ–Ω—Ç",
                        phone=client_phone,
                        email="",
                        comment="–°–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ Telegram –±–æ—Ç"
                    )
                    client_id = new_client["data"]["id"]
                    log.info(f"‚úÖ Created new client ID: {client_id}")
                except Exception as e:
                    log.error(f"‚ùå Error creating client: {e}")
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
        log.info("üìù Creating record in YClients...")
        log.info(f"üìù Record details: company_id={company_id}, service_id={service['id']}, staff_id={master['id']}, datetime={date_time}, client_id={client_id}")
        
        record = yclients.create_record(
            company_id,
            service_id=service["id"],
            staff_id=master["id"],
            date_time=date_time,
            client_id=client_id,
            comment=f"–ó–∞–ø–∏—Å—å —á–µ—Ä–µ–∑ Telegram –±–æ—Ç (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id})",
            seance_length=service.get("length", 3600)  # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        )
        
        log.info(f"‚úÖ Record created successfully: {record}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        booking_record = {
            "id": record["data"]["id"],
            "date": date_time.split()[0],
            "datetime": date_time,
            "services": [{
                "id": service["id"],
                "title": service["title"],
                "cost": service.get("price_min", 0)
            }],
            "staff": {
                "id": master["id"],
                "name": master["name"],
                "specialization": master.get("specialization", "")
            },
            "company": {
                "id": company_id,
                "title": "–°–∞–ª–æ–Ω"
            },
            "comment": f"–ó–∞–ø–∏—Å—å —á–µ—Ä–µ–∑ Telegram –±–æ—Ç",
            "visit_attendance": 0,
            "length": service.get("length", 60),
            "online": True
        }
        
        add_user_record(user_id, booking_record)
        log.info(f"üéâ BOOKING COMPLETED SUCCESSFULLY! Record ID: {booking_record['id']}")
        return booking_record
        
    except Exception as e:
        log.error(f"‚ùå CRITICAL ERROR in create_real_booking: {e}")
        log.error(f"‚ùå Error type: {type(e)}")
        import traceback
        log.error(f"‚ùå Traceback: {traceback.format_exc()}")
        raise e

# ===================== MENU HANDLERS ==================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data="book_appointment")],
        [InlineKeyboardButton("üìã –£—Å–ª—É–≥–∏", callback_data="services")],
        [InlineKeyboardButton("üë• –ú–∞—Å—Ç–µ—Ä–∞", callback_data="masters")],
        [InlineKeyboardButton("üìÖ –ú–æ–∏ –∑–∞–ø–∏—Å–∏", callback_data="my_records")],
        [InlineKeyboardButton("üí¨ –ß–∞—Ç —Å AI", callback_data="chat")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "‚ú® *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã!* ‚ú®\n\n"
        "üéØ *–ß—Ç–æ —è —É–º–µ—é:*\n"
        "‚Ä¢ üìù –ó–∞–ø–∏—Å–∞—Ç—å –≤–∞—Å –∫ –º–∞—Å—Ç–µ—Ä—É\n"
        "‚Ä¢ üìã –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å–ª—É–≥–∏\n"
        "‚Ä¢ üë• –ü–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å —Å –º–∞—Å—Ç–µ—Ä–∞–º–∏\n"
        "‚Ä¢ üìÖ –£–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞—à–∏–º–∏ –∑–∞–ø–∏—Å—è–º–∏\n"
        "‚Ä¢ üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode='Markdown',
        reply_markup=reply_markup
    )

async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data="book_appointment")],
        [InlineKeyboardButton("üìã –£—Å–ª—É–≥–∏", callback_data="services")],
        [InlineKeyboardButton("üë• –ú–∞—Å—Ç–µ—Ä–∞", callback_data="masters")],
        [InlineKeyboardButton("üìÖ –ú–æ–∏ –∑–∞–ø–∏—Å–∏", callback_data="my_records")],
        [InlineKeyboardButton("üí¨ –ß–∞—Ç —Å AI", callback_data="chat")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "üè† *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*\n\n"
        "üìù *–ó–∞–ø–∏—Å–∞—Ç—å—Å—è* - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å\n"
        "üìã *–£—Å–ª—É–≥–∏* - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å–ª—É–≥–∏\n"
        "üë• *–ú–∞—Å—Ç–µ—Ä–∞* - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–∞—Å—Ç–µ—Ä–æ–≤ –∏ –∏—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n"
        "üìÖ *–ú–æ–∏ –∑–∞–ø–∏—Å–∏* - –ø—Ä–æ—Å–º–æ—Ç—Ä –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å—è–º–∏\n"
        "üí¨ *–ß–∞—Ç —Å AI* - –æ–±—â–µ–Ω–∏–µ —Å AI –ø–æ–º–æ—â–Ω–∏–∫–æ–º",
        parse_mode='Markdown',
        reply_markup=reply_markup
    )

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == "services":
        await show_services(query)
    elif query.data == "masters":
        await show_masters(query)
    elif query.data == "my_records":
        await show_user_records(query)
    elif query.data == "book_appointment":
        await start_booking_process(query)
    elif query.data == "chat":
        await query.edit_message_text("–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å AI –ø–æ–º–æ—â–Ω–∏–∫–æ–º üí¨")
    elif query.data == "back_to_menu":
        await show_main_menu(query)
    elif query.data.startswith("delete_record_"):
        record_id = int(query.data.replace("delete_record_", ""))
        await delete_user_record(query, record_id)

async def show_services(query: CallbackQuery):
    company_id = get_company_id()
    if not company_id:
        await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –∫–æ–º–ø–∞–Ω–∏–∏.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —É—Å–ª—É–≥–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏
    services = get_services_with_prices(company_id)
    if not services:
        await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —É—Å–ª—É–≥–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    
    text = "‚ú® *–ù–∞—à–∏ —É—Å–ª—É–≥–∏ —Å —Ü–µ–Ω–∞–º–∏* ‚ú®\n\n"
    for i, service in enumerate(services[:8], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 8 —É—Å–ª—É–≥
        name = service.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        price_min = service.get("price_min", 0)
        price_max = service.get("price_max", 0)
        cost = service.get("cost", 0)
        duration = service.get("length", 0)
        
        # –ö—Ä–∞—Å–∏–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —ç–º–æ–¥–∑–∏
        if "–º–∞–Ω–∏–∫—é—Ä" in name.lower():
            emoji = "üíÖ"
        elif "–ø–µ–¥–∏–∫—é—Ä" in name.lower():
            emoji = "ü¶∂"
        elif "–º–∞—Å—Å–∞–∂" in name.lower():
            emoji = "üíÜ"
        else:
            emoji = "‚ú®"
            
        text += f"{emoji} *{name}*\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã
        if cost > 0:
            text += f"   üí∞ {cost} ‚ÇΩ\n"
        elif price_min > 0 and price_max > 0:
            if price_min == price_max:
                text += f"   üí∞ {price_min} ‚ÇΩ\n"
            else:
                text += f"   üí∞ {price_min}-{price_max} ‚ÇΩ\n"
        elif price_min > 0:
            text += f"   üí∞ –æ—Ç {price_min} ‚ÇΩ\n"
            
        if duration > 0:
            text += f"   ‚è± {duration} –º–∏–Ω\n"
        text += "\n"
    
    keyboard = [
        [InlineKeyboardButton("üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data="book_appointment")],
        [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text, parse_mode='Markdown', reply_markup=reply_markup)

async def show_masters(query: CallbackQuery):
    company_id = get_company_id()
    if not company_id:
        await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –∫–æ–º–ø–∞–Ω–∏–∏.")
        return
        
    masters = get_masters()
    if not masters:
        await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–∞—Å—Ç–µ—Ä–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    
    text = "üë• *–ù–∞—à–∏ –º–∞—Å—Ç–µ—Ä–∞ –∏ –∏—Ö —É—Å–ª—É–≥–∏* üë•\n\n"
    for master in masters:
        name = master.get("name", "–ë–µ–∑ –∏–º–µ–Ω–∏")
        specialization = master.get("specialization", "")
        staff_id = master.get("id")
        
        # –ö—Ä–∞—Å–∏–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —ç–º–æ–¥–∑–∏
        if "–º–∞—Å—Å–∞–∂" in specialization.lower():
            emoji = "üíÜ‚Äç‚ôÄÔ∏è"
        elif "–º–∞—Å—Ç–µ—Ä" in specialization.lower():
            emoji = "üíÖ"
        else:
            emoji = "‚ú®"
            
        text += f"{emoji} *{name}*\n"
        if specialization:
            text += f"   üéØ {specialization}\n"
        
        # –ü–æ–ª—É—á–∞–µ–º —É—Å–ª—É–≥–∏ –¥–ª—è —ç—Ç–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞
        if staff_id:
            master_services = get_services_for_master(company_id, staff_id)
            if master_services:
                text += f"   üí∞ *–£—Å–ª—É–≥–∏:*\n"
                for service in master_services[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —É—Å–ª—É–≥–∏
                    service_name = service.get("title", "")
                    cost = service.get("cost", 0)
                    if service_name and cost > 0:
                        text += f"      ‚Ä¢ {service_name}: {cost} ‚ÇΩ\n"
                    elif service_name:
                        text += f"      ‚Ä¢ {service_name}\n"
        
        text += "\n"
    
    keyboard = [
        [InlineKeyboardButton("üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data="book_appointment")],
        [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text, parse_mode='Markdown', reply_markup=reply_markup)

async def show_user_records(query: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = query.from_user.id
    records = get_user_records(user_id)
    
    if not records:
        keyboard = [
            [InlineKeyboardButton("üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data="book_appointment")],
            [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "üìÖ *–ú–æ–∏ –∑–∞–ø–∏—Å–∏*\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.\n\n"
            "üí° *–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å:*\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É \"üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è\"\n"
            "‚Ä¢ –ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç \"—Ö–æ—á—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è\"",
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
        return
    
    text = "üìÖ *–ú–æ–∏ –∑–∞–ø–∏—Å–∏* üìÖ\n\n"
    keyboard = []
    
    for i, record in enumerate(records[:5]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –∑–∞–ø–∏—Å–µ–π
        record_text = format_user_record(record)
        text += f"üìã *–ó–∞–ø–∏—Å—å {i+1}:*\n{record_text}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏
        keyboard.append([
            InlineKeyboardButton(
                f"üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å {i+1}", 
                callback_data=f"delete_record_{record.get('id', i)}"
            )
        ])
    
    keyboard.append([InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text, 
        parse_mode='Markdown', 
        reply_markup=reply_markup
    )

async def delete_user_record(query: CallbackQuery, record_id: int):
    """–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = query.from_user.id
    
    try:
        # –£–¥–∞–ª—è–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        remove_user_record(user_id, record_id)
        
        # TODO: –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤—ã–∑–æ–≤ API –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
        # yclients.delete_user_record(record_id, record_hash)
        
        await query.edit_message_text(
            f"‚úÖ –ó–∞–ø–∏—Å—å #{record_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ö –∑–∞–ø–∏—Å—è–º", callback_data="my_records")
            ]])
        )
    except Exception as e:
        log.error(f"Error deleting record: {e}")
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ö –∑–∞–ø–∏—Å—è–º", callback_data="my_records")
            ]])
        )

async def start_booking_process(query: CallbackQuery):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–∏—Å–∏"""
    user_id = query.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if user_id not in UserPhone:
        await query.edit_message_text(
            "üì± *–î–ª—è –∑–∞–ø–∏—Å–∏ –Ω—É–∂–µ–Ω –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞*\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "`+7XXXXXXXXXX`\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: `+79991234567`",
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")
            ]])
        )
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å–ª—É–≥–∏ –∏ –º–∞—Å—Ç–µ—Ä–æ–≤
    services = get_services()
    masters = get_masters()
    
    text = "üìù *–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏* üìù\n\n"
    text += "‚ú® *–î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å–ª—É–≥–∏:*\n"
    for service in services[:5]:
        name = service.get('title', '–£—Å–ª—É–≥–∞')
        price = service.get('price_min', 0)
        if price > 0:
            text += f"‚Ä¢ {name} (–æ—Ç {price} ‚ÇΩ)\n"
        else:
            text += f"‚Ä¢ {name}\n"
    
    text += "\nüë• *–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞—Å—Ç–µ—Ä–∞:*\n"
    for master in masters[:5]:
        name = master.get('name', '–ú–∞—Å—Ç–µ—Ä')
        spec = master.get('specialization', '')
        if spec:
            text += f"‚Ä¢ {name} ({spec})\n"
        else:
            text += f"‚Ä¢ {name}\n"
    
    text += "\nüí¨ *–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∞—à–∏–º–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è–º–∏:*\n"
    text += "–ù–∞–ø—Ä–∏–º–µ—Ä: `–•–æ—á—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –º–∞–Ω–∏–∫—é—Ä –∫ –ê—Ä–∏–Ω–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤ 14:00`"
    
    await query.edit_message_text(
        text,
        parse_mode='Markdown',
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")
        ]])
    )

async def show_main_menu(query: CallbackQuery):
    keyboard = [
        [InlineKeyboardButton("üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data="book_appointment")],
        [InlineKeyboardButton("üìã –£—Å–ª—É–≥–∏", callback_data="services")],
        [InlineKeyboardButton("üë• –ú–∞—Å—Ç–µ—Ä–∞", callback_data="masters")],
        [InlineKeyboardButton("üìÖ –ú–æ–∏ –∑–∞–ø–∏—Å–∏", callback_data="my_records")],
        [InlineKeyboardButton("üí¨ –ß–∞—Ç —Å AI", callback_data="chat")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        "üè† *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*\n\n"
        "üìù *–ó–∞–ø–∏—Å–∞—Ç—å—Å—è* - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å\n"
        "üìã *–£—Å–ª—É–≥–∏* - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å–ª—É–≥–∏\n"
        "üë• *–ú–∞—Å—Ç–µ—Ä–∞* - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–∞—Å—Ç–µ—Ä–æ–≤ –∏ –∏—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n"
        "üìÖ *–ú–æ–∏ –∑–∞–ø–∏—Å–∏* - –ø—Ä–æ—Å–º–æ—Ç—Ä –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å—è–º–∏\n"
        "üí¨ *–ß–∞—Ç —Å AI* - –æ–±—â–µ–Ω–∏–µ —Å AI –ø–æ–º–æ—â–Ω–∏–∫–æ–º",
        parse_mode='Markdown',
        reply_markup=reply_markup
    )

def create_test_record(user_id: int):
    """–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    test_record = {
        "id": user_id + 1000,  # –ü—Ä–æ—Å—Ç–æ–π ID –¥–ª—è —Ç–µ—Å—Ç–∞
        "date": "2024-01-15",
        "datetime": "2024-01-15 14:30",
        "services": [
            {
                "id": 1,
                "title": "–°—Ç—Ä–∏–∂–∫–∞",
                "cost": 1500,
                "price_min": 1200,
                "price_max": 2000
            }
        ],
        "staff": {
            "id": 1,
            "name": "–ê–Ω–Ω–∞ –ò–≤–∞–Ω–æ–≤–∞",
            "specialization": "–ü–∞—Ä–∏–∫–º–∞—Ö–µ—Ä"
        },
        "company": {
            "id": 1,
            "title": "–°–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã '–≠–ª–µ–≥–∞–Ω—Ç'",
            "address": "—É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, 123"
        },
        "comment": "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å",
        "visit_attendance": 0,  # –û–∂–∏–¥–∞–Ω–∏–µ
        "length": 60,
        "online": True
    }
    add_user_record(user_id, test_record)
    return test_record

async def reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user_id = update.message.from_user.id
    add_memory(user_id, "user", text)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    if text.lower() in ["—Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å", "—Ç–µ—Å—Ç –∑–∞–ø–∏—Å—å", "–¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å"]:
        test_record = create_test_record(user_id)
        await update.message.reply_text(
            f"‚úÖ *–°–æ–∑–¥–∞–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å!*\n\n"
            f"üìÖ *–î–∞—Ç–∞:* {test_record['date']}\n"
            f"‚è∞ *–í—Ä–µ–º—è:* {test_record['datetime']}\n"
            f"üë§ *–ú–∞—Å—Ç–µ—Ä:* {test_record['staff']['name']}\n"
            f"üõç *–£—Å–ª—É–≥–∞:* {test_record['services'][0]['title']}\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é *'–ú–æ–∏ –∑–∞–ø–∏—Å–∏'* –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞!",
            parse_mode='Markdown'
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if text.startswith("+") and len(text) >= 10:
        UserPhone[user_id] = text
        await update.message.reply_text(
            f"‚úÖ *–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {text} —Å–æ—Ö—Ä–∞–Ω–µ–Ω!*\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–ø–∏—Å–∏.\n"
            f"–ù–∞–ø–∏—à–∏—Ç–µ `—Ö–æ—á—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è` –¥–ª—è –Ω–∞—á–∞–ª–∞.",
            parse_mode='Markdown'
        )
        return

    if is_booking(text):
        log.info(f"üéØ BOOKING DETECTED: '{text}'")
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é
        history = get_recent_history(user_id, 50)
        log.info(f"üìö HISTORY: {history[:200]}...")
        parsed_data = parse_booking_message(text, history)
        
        log.info(f"üîç PARSED MESSAGE: {parsed_data}")
        
        # –ï—Å–ª–∏ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ, —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –Ω–∞–ø—Ä—è–º—É—é
        if parsed_data["has_all_info"]:
            try:
                user_phone = UserPhone.get(user_id)
                if not user_phone:
                    await update.message.reply_text(
                        "üì± *–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –Ω—É–∂–µ–Ω –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞*\n\n"
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                        "`+7XXXXXXXXXX`",
                        parse_mode='Markdown'
                    )
                    return
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –Ω–∞–ø—Ä—è–º—É—é
                booking_record = create_booking_from_parsed_data(
                    user_id,
                    parsed_data,
                    client_name=update.message.from_user.first_name or "–ö–ª–∏–µ–Ω—Ç",
                    client_phone=user_phone
                )
                
                answer = f"üéâ *–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–µ!* üéâ\n\n"
                answer += f"üìÖ *–£—Å–ª—É–≥–∞:* {parsed_data['service']}\n"
                answer += f"üë§ *–ú–∞—Å—Ç–µ—Ä:* {parsed_data['master']}\n"
                answer += f"‚è∞ *–í—Ä–µ–º—è:* {parsed_data['datetime']}\n\n"
                answer += "–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–ø–∏—Å—å! –ñ–¥–µ–º –≤–∞—Å –≤ —Å–∞–ª–æ–Ω–µ! ‚ú®"
                
            except Exception as e:
                log.error(f"Error creating booking from parsed data: {e}")
                
                # Sprawdzamy czy to konflikt czasowy
                if "–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ" in str(e) or "conflict" in str(e).lower():
                    answer = f"‚ùå *–í—Ä–µ–º—è {parsed_data['datetime']} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ*\n\n"
                    answer += f"üí° *–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:*\n"
                    answer += f"‚Ä¢ {parsed_data['service']} —É {parsed_data['master']}\n"
                    answer += f"‚Ä¢ –ó–∞–≤—Ç—Ä–∞ –≤ 14:00\n"
                    answer += f"‚Ä¢ –ó–∞–≤—Ç—Ä–∞ –≤ 15:00\n"
                    answer += f"‚Ä¢ –ó–∞–≤—Ç—Ä–∞ –≤ 17:00\n\n"
                    answer += f"–ù–∞–ø–∏—à–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –≤—Ä–µ–º—è, –Ω–∞–ø—Ä–∏–º–µ—Ä: `–∑–∞–≤—Ç—Ä–∞ 14:00`"
                else:
                    answer = f"‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏:* {str(e)}"
        else:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º AI
            api_data = get_api_data_for_ai()
            msg = BOOKING_PROMPT.replace("{{api_data}}", api_data).replace("{{message}}", text).replace("{{history}}", history)
            log.info(f"ü§ñ AI PROMPT: {msg}")
            answer = groq_chat([{"role": "user", "content": msg}])
            log.info(f"ü§ñ AI RESPONSE: {answer}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –æ—Ç–≤–µ—Ç –∫–æ–º–∞–Ω–¥—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏
            if "–ó–ê–ü–ò–°–¨:" in answer:
                try:
                    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Ç–≤–µ—Ç–∞ AI
                    booking_line = [line for line in answer.split('\n') if '–ó–ê–ü–ò–°–¨:' in line][0]
                    parts = booking_line.split('|')
                    if len(parts) >= 3:
                        service_name = parts[0].replace('–ó–ê–ü–ò–°–¨:', '').strip()
                        master_name = parts[1].strip()
                        date_time = parts[2].strip()
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
                        user_phone = UserPhone.get(user_id)
                        if not user_phone:
                            await update.message.reply_text(
                                "üì± *–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –Ω—É–∂–µ–Ω –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞*\n\n"
                                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                                "`+7XXXXXXXXXX`",
                                parse_mode='Markdown'
                            )
                            return
                        
                        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é –∑–∞–ø–∏—Å—å
                        booking_record = create_real_booking(
                            user_id, 
                            service_name, 
                            master_name, 
                            date_time,
                            client_name=update.message.from_user.first_name or "–ö–ª–∏–µ–Ω—Ç",
                            client_phone=user_phone
                        )
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
                        answer = f"üéâ *–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–µ!* üéâ\n\n" + answer.replace("–ó–ê–ü–ò–°–¨:", "üìÖ *–°–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å:*")
                        
                except Exception as e:
                    log.error(f"Error creating booking: {e}")
                    
                    # Sprawdzamy czy to konflikt czasowy
                    if "–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ" in str(e) or "conflict" in str(e).lower():
                        answer += f"\n\n‚ùå *–í—Ä–µ–º—è {date_time} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ*\n\n"
                        answer += f"üí° *–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:*\n"
                        answer += f"‚Ä¢ {service_name} —É {master_name}\n"
                        answer += f"‚Ä¢ –ó–∞–≤—Ç—Ä–∞ –≤ 14:00\n"
                        answer += f"‚Ä¢ –ó–∞–≤—Ç—Ä–∞ –≤ 15:00\n"
                        answer += f"‚Ä¢ –ó–∞–≤—Ç—Ä–∞ –≤ 17:00\n\n"
                        answer += f"–ù–∞–ø–∏—à–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –≤—Ä–µ–º—è, –Ω–∞–ø—Ä–∏–º–µ—Ä: `–∑–∞–≤—Ç—Ä–∞ 14:00`"
                    else:
                        answer += f"\n\n‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏:* {str(e)}"
    else:
        msg = CHAT_PROMPT.replace("{{history}}", get_history(user_id)).replace("{{message}}", text)
        answer = groq_chat([{"role": "user", "content": msg}])

    add_memory(user_id, "assistant", answer)
    await update.message.reply_text(answer)

# ===================== RUN BOT ========================
def main():
    # Start Telegram bot
    app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    
    # Command handlers
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("menu", menu))
    
    # Callback query handler for inline buttons
    app.add_handler(CallbackQueryHandler(button_callback))
    
    # Message handler for AI chat
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, reply))
    
    # Start bot
    log.info("üöÄ Starting Telegram Bot...")
    app.run_polling()

if __name__ == "__main__":
    main()
