"""
WhatsApp Bot using Green API
"""
import os
import logging
import requests
from collections import defaultdict
from typing import Dict, List
from dotenv import load_dotenv
from whatsapp_chatbot_python import GreenAPIBot, Notification
from yclients_client import YClientsClient, YClientsError

# Load environment variables
load_dotenv()

# Setup logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
log = logging.getLogger(__name__)

# Green API configuration
GREEN_API_ID = os.getenv("GREEN_API_ID")
GREEN_API_TOKEN = os.getenv("GREEN_API_TOKEN")

if not GREEN_API_ID or not GREEN_API_TOKEN:
    log.error("‚ùå GREEN_API_ID or GREEN_API_TOKEN not found in .env file")
    exit(1)

# Initialize WhatsApp bot
bot = GreenAPIBot(GREEN_API_ID, GREEN_API_TOKEN)

# Initialize YClients client
YCLIENTS_PARTNER_TOKEN = os.getenv("YCLIENTS_PARTNER_TOKEN")
YCLIENTS_USER_TOKEN = os.getenv("YCLIENTS_USER_TOKEN")
GROQ_API_KEY = os.getenv("GROQ_API_KEY")

if not YCLIENTS_PARTNER_TOKEN or not YCLIENTS_USER_TOKEN or not GROQ_API_KEY:
    log.error("‚ùå Missing required environment variables for YClients or Groq API")
    exit(1)

yclients = YClientsClient(YCLIENTS_PARTNER_TOKEN, YCLIENTS_USER_TOKEN)

# Configuration
BASE = "https://api.groq.com/openai/v1/chat/completions"
MODEL = "openai/gpt-oss-120b"
MEMORY_TURNS = 6

# Global storage for user data
UserMemory: Dict[str, List[tuple]] = defaultdict(list)
UserPhone: Dict[str, str] = {}
UserRecords: Dict[str, List[Dict]] = defaultdict(list)
UserAuth: Dict[str, Dict] = defaultdict(dict)

# Booking keywords for NLP
BOOKING_KEYWORDS = [
    "–∑–∞–ø–∏—Å—å", "–∑–∞–ø–∏—Å–∞—Ç—å—Å—è", "–∑–∞–ø–∏—Å–∞—Ç—å", "–∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å",
    "—É—Å–ª—É–≥–∞", "–º–∞—Å—Ç–µ—Ä", "–≤—Ä–µ–º—è", "–¥–∞—Ç–∞",
    "–∫–æ–≥–¥–∞ –º–æ–∂–Ω–æ", "—Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è", "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ",
    "–∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞", "—Ö–æ—á—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è", "–Ω—É–∂–Ω–∞ –∑–∞–ø–∏—Å—å",
    "–º–∞–Ω–∏–∫—é—Ä", "–ø–µ–¥–∏–∫—é—Ä", "–º–∞—Å—Å–∞–∂",  # nazwy us≈Çug
    "–∞—Ä–∏–Ω–∞", "–µ–∫–∞—Ç–µ—Ä–∏–Ω–∞", "–ø–æ–ª–∏–Ω–∞", "–∫–∞—Ç—è", "–∫–∞—Ç—é—à–∞",  # imiona master√≥w
    "–æ–∫—Ç—è–±—Ä—è", "–Ω–æ—è–±—Ä—è", "–¥–µ–∫–∞–±—Ä—è", "—è–Ω–≤–∞—Ä—è", "—Ñ–µ–≤—Ä–∞–ª—è", "–º–∞—Ä—Ç–∞", "–∞–ø—Ä–µ–ª—è", "–º–∞—è", "–∏—é–Ω—è", "–∏—é–ª—è", "–∞–≤–≥—É—Å—Ç–∞", "—Å–µ–Ω—Ç—è–±—Ä—è",  # miesiƒÖce
    ":", "—á–∞—Å–æ–≤", "–≤ ", "–Ω–∞ "  # czas
]

BOOKING_PROMPT = """
–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∑–∞–ø–∏—Å–∏ –∫ –º–∞—Å—Ç–µ—Ä–∞–º. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –í–°–Æ –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –∏ –æ–ø—Ä–µ–¥–µ–ª–∏:
1. –ö–∞–∫–∞—è —É—Å–ª—É–≥–∞ –Ω—É–∂–Ω–∞
2. –ï—Å—Ç—å –ª–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ –º–∞—Å—Ç–µ—Ä—É  
3. –ñ–µ–ª–∞–µ–º–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è

–ò—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞:
{{history}}

–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–¢–û–ß–ù–´–ï –î–ê–ù–ù–´–ï –ò–ó API):
{{api_data}}

–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {{message}}

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: 
- –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û —É—Å–ª—É–≥–∏ –∏ –º–∞—Å—Ç–µ—Ä–æ–≤ –∏–∑ "–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ" –≤—ã—à–µ
- –ù–ï –í–´–î–£–ú–´–í–ê–ô —É—Å–ª—É–≥–∏ - –∏—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —Ç–µ —á—Ç–æ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ
- –ù–ï –ò–°–ü–û–õ–¨–ó–£–ô —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ** - —Ç–æ–ª—å–∫–æ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
- –ù–ï –ü–†–ò–î–£–ú–´–í–ê–ô —Ü–µ–Ω—ã - –∏—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —Ç–µ —á—Ç–æ —É–∫–∞–∑–∞–Ω—ã –≤ API
- –ï—Å–ª–∏ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å–ª—É–≥–µ, –º–∞—Å—Ç–µ—Ä–µ –∏ –≤—Ä–µ–º–µ–Ω–∏ - –°–û–ó–î–ê–ô –ó–ê–ü–ò–°–¨
- –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø–∏—à–µ—Ç "—Ö–æ—á—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è" - –ø—Ä–æ–≤–µ—Ä—å –∏—Å—Ç–æ—Ä–∏—é –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
- –ï—Å–ª–∏ –µ—Å—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ (—É—Å–ª—É–≥–∞, –º–∞—Å—Ç–µ—Ä, –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è) - –æ—Ç–≤–µ—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
–ó–ê–ü–ò–°–¨: [—É—Å–ª—É–≥–∞] | [–º–∞—Å—Ç–µ—Ä] | [–¥–∞—Ç–∞ –≤—Ä–µ–º—è]

–ù–∞–ø—Ä–∏–º–µ—Ä: –ó–ê–ü–ò–°–¨: –ú–∞–Ω–∏–∫—é—Ä —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º –≥–µ–ª—å-–ª–∞–∫ | –ê—Ä–∏–Ω–∞ | 2025-10-26 12:00

–ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, —É—Ç–æ—á–Ω–∏ –Ω–µ–¥–æ—Å—Ç–∞—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.
"""

CHAT_PROMPT = """
–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –Ω–∞ —Ä—É—Å—Å–∫–æ–º.
–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞:
{{history}}

–°–æ–æ–±—â–µ–Ω–∏–µ:
{{message}}
–û—Ç–≤–µ—Ç—å –∫—Ä–∞—Ç–∫–æ –ø–æ –¥–µ–ª—É.
"""

def get_company_id():
    """Get the first available company ID"""
    log.info("üè¢ API CALL: Getting companies from YClients...")
    try:
        companies = yclients.my_companies()
        log.info(f"üè¢ API RESPONSE: {companies}")
        if companies.get("data") and len(companies["data"]) > 0:
            company_id = companies["data"][0]["id"]
            log.info(f"‚úÖ Company ID found: {company_id}")
            return company_id
        log.warning("‚ö†Ô∏è No companies found in response")
        return None
    except YClientsError as e:
        log.error(f"‚ùå YClients API Error getting company: {e}")
        return None

def get_services_data():
    """Get services data from YClients API"""
    try:
        company_id = get_company_id()
        if not company_id:
            return "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–∏"
        
        # Get services using the same method as Telegram bot
        services_response = yclients.company_services(company_id)
        services_data = services_response.get("data", [])
        
        # Get masters using the same method as Telegram bot
        masters_response = yclients.company_staff(company_id)
        masters_data = masters_response.get("data", [])
        
        services_text = "–î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å–ª—É–≥–∏:\n"
        for service in services_data:
            title = service.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            price_min = service.get('price_min', 0)
            price_max = service.get('price_max', 0)
            if price_min == price_max:
                services_text += f"- {title} ({price_min} —Ä—É–±.)\n"
            else:
                services_text += f"- {title} ({price_min}-{price_max} —Ä—É–±.)\n"
        
        masters_text = "\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞—Å—Ç–µ—Ä–∞:\n"
        for master in masters_data:
            name = master.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')
            masters_text += f"- {name}\n"
        
        return services_text + masters_text
    except Exception as e:
        log.error(f"Error getting services data: {e}")
        return "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —É—Å–ª—É–≥"

def add_memory(user_id: str, role: str, content: str):
        """Add message to user memory"""
        UserMemory[user_id].append((role, content))
    
    # Keep only last MEMORY_TURNS conversations
        if len(UserMemory[user_id]) > MEMORY_TURNS * 2:
            UserMemory[user_id] = UserMemory[user_id][-MEMORY_TURNS * 2:]

def get_memory_history(user_id: str) -> str:
    """Get conversation history for user"""
    history = UserMemory.get(user_id, [])
    return "\n".join([f"{role}: {content}" for role, content in history])

def call_groq_api(prompt: str, user_id: str) -> str:
    """Call Groq API for AI response"""
    try:
        history = get_memory_history(user_id)
        api_data = get_services_data()
        
        # Replace placeholders in prompt
        formatted_prompt = prompt.replace("{{history}}", history).replace("{{api_data}}", api_data)
        
        payload = {
            "model": MODEL,
            "messages": [
                {"role": "user", "content": formatted_prompt}
            ],
            "temperature": 0.7,
            "max_tokens": 500
        }
        
        headers = {
            "Authorization": f"Bearer {GROQ_API_KEY}",
            "Content-Type": "application/json"
        }
        
        response = requests.post(BASE, json=payload, headers=headers, timeout=30)
        response.raise_for_status()
        
        result = response.json()
        return result['choices'][0]['message']['content'].strip()
        
    except Exception as e:
        log.error(f"Error calling Groq API: {e}")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞."

def is_booking_request(text: str) -> bool:
    """Check if message contains booking keywords"""
    text_lower = text.lower()
    return any(keyword in text_lower for keyword in BOOKING_KEYWORDS)

def parse_booking_data(text: str) -> Dict:
    """Parse booking data from text"""
    # Simple parsing logic - can be enhanced
    parsed = {}
    
    # Look for service names
    services_data = get_services_data()
    for line in services_data.split('\n'):
        if line.startswith('- ') and '—Ä—É–±' in line:
            service_name = line.split(' (')[0].replace('- ', '')
            if service_name.lower() in text.lower():
                parsed['service'] = service_name
            break
    
    # Look for master names
    masters_data = get_services_data()
    for line in masters_data.split('\n'):
        if line.startswith('- ') and '—Ä—É–±' not in line:
            master_name = line.replace('- ', '')
            if master_name.lower() in text.lower():
                parsed['master'] = master_name
            break
    
    # Look for date/time patterns
    import re
    date_patterns = [
        r'(\d{1,2}):(\d{2})',  # HH:MM
        r'(\d{1,2})\s+(–æ–∫—Ç—è–±—Ä—è|–Ω–æ—è–±—Ä—è|–¥–µ–∫–∞–±—Ä—è|—è–Ω–≤–∞—Ä—è|—Ñ–µ–≤—Ä–∞–ª—è|–º–∞—Ä—Ç–∞|–∞–ø—Ä–µ–ª—è|–º–∞—è|–∏—é–Ω—è|–∏—é–ª—è|–∞–≤–≥—É—Å—Ç–∞|—Å–µ–Ω—Ç—è–±—Ä—è)',
        r'(\d{4}-\d{2}-\d{2})',  # YYYY-MM-DD
    ]
    
    for pattern in date_patterns:
        match = re.search(pattern, text)
        if match:
            parsed['datetime'] = match.group(0)
            break
    
    return parsed

def create_booking(user_id: str, parsed_data: Dict) -> str:
    """Create booking using YClients API"""
    try:
        company_id = get_company_id()
        if not company_id:
            return "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –∫–æ–º–ø–∞–Ω–∏–∏"
        
        # Use user_id as phone (it's already the phone number from WhatsApp)
        user_phone = user_id
        
        # Create booking data
        booking_data = {
            "client": {
                "name": f"WhatsApp User {user_id[:8]}",
                "phone": user_phone
            },
            "services": [],
            "datetime": parsed_data.get('datetime', ''),
            "comment": f"–ó–∞–ø–∏—Å—å —á–µ—Ä–µ–∑ WhatsApp –±–æ—Ç–∞"
        }
        
        # Add service if found
        if 'service' in parsed_data:
            services = yclients.get_services(company_id)
            for service in services:
                if service['title'] == parsed_data['service']:
                    booking_data["services"].append({
                        "id": service['id'],
                        "price": service['price_min']
                    })
                    break
        
        # Create booking
        result = yclients.create_booking(company_id, booking_data)
        
        if result:
            return f"‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n–£—Å–ª—É–≥–∞: {parsed_data.get('service', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n–ú–∞—Å—Ç–µ—Ä: {parsed_data.get('master', '–õ—é–±–æ–π –¥–æ—Å—Ç—É–ø–Ω—ã–π')}\n–í—Ä–µ–º—è: {parsed_data.get('datetime', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}"
        else:
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        
    except Exception as e:
        log.error(f"Error creating booking: {e}")
        return "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏."

@bot.router.message()
def message_handler(notification: Notification) -> None:
    """Handle incoming WhatsApp messages"""
    try:
        text = notification.message_text
        
        # Debug: print all available attributes
        log.info(f"üîç Notification attributes: {dir(notification)}")
        
        # Try different attributes to get sender info
        user_id = getattr(notification, 'sender_id', None) or getattr(notification, 'sender_phone', None) or getattr(notification, 'sender', None) or 'unknown'
        
        log.info(f"üì± WhatsApp message from {user_id}: {text}")
        
        add_memory(user_id, "user", text)
        
        # Check if it's a booking request
        if is_booking_request(text):
            # Use booking prompt
            response = call_groq_api(BOOKING_PROMPT, user_id)
            
            # Check if response contains booking data
            if "–ó–ê–ü–ò–°–¨:" in response:
                # Parse booking data
                booking_line = response.split("–ó–ê–ü–ò–°–¨:")[1].strip()
                parts = booking_line.split(" | ")
                
                if len(parts) >= 3:
                    parsed_data = {
                        'service': parts[0].strip(),
                        'master': parts[1].strip(),
                        'datetime': parts[2].strip()
                    }
                    
                    # Create booking
                    booking_result = create_booking(user_id, parsed_data)
                    response = booking_result
                else:
                    response = "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        else:
            # Use chat prompt
            response = call_groq_api(CHAT_PROMPT, user_id)
        
        add_memory(user_id, "assistant", response)
        
        # Send response
        notification.answer(response)
        
    except Exception as e:
        log.error(f"‚ùå Error handling WhatsApp message: {e}")
        notification.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def main():
    """Start WhatsApp bot"""
    log.info("üöÄ Starting WhatsApp Bot...")
    log.info(f"üîç Green API ID: {GREEN_API_ID[:10]}...")
    
    try:
        bot.run_forever()
    except KeyboardInterrupt:
        log.info("üõë WhatsApp Bot stopped by user")
    except Exception as e:
        log.error(f"‚ùå WhatsApp Bot error: {e}")

if __name__ == "__main__":
    main()
