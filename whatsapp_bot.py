#!/usr/bin/env python3
"""
WhatsApp Bot - r√≥wnoleg≈Çy do Telegram bota
U≈ºywa whatsapp-web.js przez Node.js bridge
"""

import os
import sys
import json
import logging
import asyncio
import subprocess
from datetime import datetime
from typing import Dict, List, Any
from dotenv import load_dotenv

# Import funkcji z g≈Ç√≥wnego bota
from app import (
    get_company_id, get_services_with_prices, get_masters, 
    get_master_services_text, parse_booking_message,
    create_booking_from_parsed_data, UserPhone, UserMemory,
    add_memory, get_recent_history, groq_chat, BOOKING_PROMPT,
    CHAT_PROMPT, is_booking
)

# Setup logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
log = logging.getLogger(__name__)

# Load environment variables
load_dotenv()

class WhatsAppBot:
    def __init__(self):
        self.process = None
        self.is_running = False
        
    async def start(self):
        """Start WhatsApp bot"""
        try:
            log.info("üöÄ Starting WhatsApp Bot...")
            
            # Sprawd≈∫ czy Node.js jest zainstalowany
            try:
                subprocess.run(["node", "--version"], check=True, capture_output=True)
                log.info("‚úÖ Node.js is available")
            except subprocess.CalledProcessError:
                log.error("‚ùå Node.js not found. Please install Node.js first.")
                return False
            
            # Sprawd≈∫ czy whatsapp-web.js jest zainstalowany
            try:
                subprocess.run(["npm", "list", "whatsapp-web.js"], check=True, capture_output=True)
                log.info("‚úÖ whatsapp-web.js is available")
            except subprocess.CalledProcessError:
                log.info("üì¶ Installing whatsapp-web.js...")
                subprocess.run(["npm", "install", "whatsapp-web.js"], check=True)
                log.info("‚úÖ whatsapp-web.js installed")
            
            # Start Node.js bridge
            self.process = subprocess.Popen([
                "node", "whatsapp_bridge.js"
            ], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
            
            self.is_running = True
            log.info("‚úÖ WhatsApp Bot started successfully!")
            
            # Monitor process
            await self.monitor_process()
            
        except Exception as e:
            log.error(f"‚ùå Error starting WhatsApp Bot: {e}")
            return False
    
    async def monitor_process(self):
        """Monitor Node.js process"""
        while self.is_running:
            if self.process.poll() is not None:
                log.error("‚ùå WhatsApp Bot process died")
                self.is_running = False
                break
            
            # Read output
            try:
                line = self.process.stdout.readline()
                if line:
                    await self.handle_message(line.strip())
            except Exception as e:
                log.error(f"‚ùå Error reading process output: {e}")
            
            await asyncio.sleep(0.1)
    
    async def handle_message(self, message_data: str):
        """Handle incoming WhatsApp message"""
        try:
            if not message_data:
                return
                
            data = json.loads(message_data)
            
            if data.get("type") == "message":
                await self.process_message(data)
            elif data.get("type") == "qr":
                log.info(f"üì± WhatsApp QR Code: {data.get('qr')}")
                log.info("üì± Please scan QR code with WhatsApp to connect")
                
        except json.JSONDecodeError:
            log.debug(f"Non-JSON output: {message_data}")
        except Exception as e:
            log.error(f"‚ùå Error handling message: {e}")
    
    async def process_message(self, data: Dict[str, Any]):
        """Process incoming WhatsApp message"""
        try:
            message = data.get("message", "")
            sender = data.get("sender", "")
            chat_id = data.get("chatId", "")
            
            log.info(f"üì® WhatsApp message from {sender}: {message}")
            
            # Use same logic as Telegram bot
            response = await self.generate_response(message, sender)
            
            # Send response back
            await self.send_message(chat_id, response)
            
        except Exception as e:
            log.error(f"‚ùå Error processing message: {e}")
    
    async def generate_response(self, text: str, user_id: str) -> str:
        """Generate response using same logic as Telegram bot"""
        try:
            # Add to memory
            add_memory(user_id, "user", text)
            
            # Check for special commands
            if text.lower() in ["—Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å", "—Ç–µ—Å—Ç –∑–∞–ø–∏—Å—å", "–¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å"]:
                from app import create_test_record
                test_record = create_test_record(user_id)
                response = (
                    f"‚úÖ *–°–æ–∑–¥–∞–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å!*\n\n"
                    f"üìÖ *–î–∞—Ç–∞:* {test_record['date']}\n"
                    f"‚è∞ *–í—Ä–µ–º—è:* {test_record['datetime']}\n"
                    f"üë§ *–ú–∞—Å—Ç–µ—Ä:* {test_record['staff']['name']}\n"
                    f"üõç *–£—Å–ª—É–≥–∞:* {test_record['services'][0]['title']}\n\n"
                    f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É '–º–æ–∏ –∑–∞–ø–∏—Å–∏' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞!"
                )
                add_memory(user_id, "assistant", response)
                return response
            
            # Check if phone number
            if text.startswith("+") and len(text) >= 10:
                UserPhone[user_id] = text
                response = (
                    f"‚úÖ *–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {text} —Å–æ—Ö—Ä–∞–Ω–µ–Ω!*\n\n"
                    f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–ø–∏—Å–∏.\n"
                    f"–ù–∞–ø–∏—à–∏—Ç–µ `—Ö–æ—á—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è` –¥–ª—è –Ω–∞—á–∞–ª–∞."
                )
                add_memory(user_id, "assistant", response)
                return response
            
            # Check if booking message
            if is_booking(text):
                log.info(f"üéØ BOOKING DETECTED: '{text}'")
                history = get_recent_history(user_id, 50)
                parsed_data = parse_booking_message(text, history)
                
                if parsed_data["has_all_info"]:
                    try:
                        user_phone = UserPhone.get(user_id)
                        if not user_phone:
                            response = (
                                "üì± *–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –Ω—É–∂–µ–Ω –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞*\n\n"
                                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                                "`+7XXXXXXXXXX`"
                            )
                            add_memory(user_id, "assistant", response)
                            return response
                        
                        # Create booking
                        booking_record = create_booking_from_parsed_data(
                            user_id,
                            parsed_data,
                            client_name="WhatsApp User",
                            client_phone=user_phone
                        )
                        
                        response = f"üéâ *–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–µ!* üéâ\n\n"
                        response += f"üìÖ *–£—Å–ª—É–≥–∞:* {parsed_data['service']}\n"
                        response += f"üë§ *–ú–∞—Å—Ç–µ—Ä:* {parsed_data['master']}\n"
                        response += f"‚è∞ *–í—Ä–µ–º—è:* {parsed_data['datetime']}\n\n"
                        response += "–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–ø–∏—Å—å! –ñ–¥–µ–º –≤–∞—Å –≤ —Å–∞–ª–æ–Ω–µ! ‚ú®"
                        
                    except Exception as e:
                        log.error(f"Error creating booking: {e}")
                        if "–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ" in str(e) or "conflict" in str(e).lower():
                            response = f"‚ùå *–í—Ä–µ–º—è {parsed_data['datetime']} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ*\n\n"
                            response += f"üí° *–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:*\n"
                            response += f"‚Ä¢ {parsed_data['service']} —É {parsed_data['master']}\n"
                            response += f"‚Ä¢ –ó–∞–≤—Ç—Ä–∞ –≤ 14:00\n"
                            response += f"‚Ä¢ –ó–∞–≤—Ç—Ä–∞ –≤ 15:00\n"
                            response += f"‚Ä¢ –ó–∞–≤—Ç—Ä–∞ –≤ 17:00\n\n"
                            response += f"–ù–∞–ø–∏—à–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –≤—Ä–µ–º—è, –Ω–∞–ø—Ä–∏–º–µ—Ä: `–∑–∞–≤—Ç—Ä–∞ 14:00`"
                        else:
                            response = f"‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏:* {str(e)}"
                else:
                    # Check for master mention
                    masters = get_masters()
                    master_names = [m.get("name", "").lower() for m in masters]
                    
                    mentioned_master = None
                    for master_name in master_names:
                        if master_name in text.lower():
                            mentioned_master = master_name
                            break
                    
                    if mentioned_master:
                        master_display_name = next((m.get("name") for m in masters if m.get("name", "").lower() == mentioned_master), mentioned_master)
                        response = get_master_services_text(master_display_name)
                        log.info(f"üéØ DETERMINISTIC RESPONSE for {master_display_name}")
                    else:
                        # Use AI
                        api_data = self.get_api_data_for_ai()
                        msg = BOOKING_PROMPT.replace("{{api_data}}", api_data).replace("{{message}}", text).replace("{{history}}", history)
                        response = groq_chat([{"role": "user", "content": msg}])
                        log.info(f"ü§ñ AI RESPONSE: {response}")
            else:
                # Regular chat
                msg = CHAT_PROMPT.replace("{{history}}", get_recent_history(user_id)).replace("{{message}}", text)
                response = groq_chat([{"role": "user", "content": msg}])
            
            add_memory(user_id, "assistant", response)
            return response
            
        except Exception as e:
            log.error(f"‚ùå Error generating response: {e}")
            return "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    
    def get_api_data_for_ai(self) -> str:
        """Get API data for AI (same as Telegram bot)"""
        try:
            company_id = get_company_id()
            if not company_id:
                return "–î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
                
            services = get_services_with_prices(company_id)
            masters = get_masters()
            
            data_text = "–î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å–ª—É–≥–∏ (–¢–û–ß–ù–´–ï –î–ê–ù–ù–´–ï –ò–ó API):\n"
            for service in services:
                name = service.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
                cost = service.get("cost", 0)
                price_min = service.get("price_min", 0)
                price_max = service.get("price_max", 0)
                duration = service.get("length", 0)
                
                data_text += f"- {name}"
                
                if cost > 0:
                    data_text += f" ({cost} —Ä—É–±.)"
                elif price_min > 0 and price_max > 0:
                    if price_min == price_max:
                        data_text += f" ({price_min} —Ä—É–±.)"
                    else:
                        data_text += f" ({price_min}-{price_max} —Ä—É–±.)"
                elif price_min > 0:
                    data_text += f" (–æ—Ç {price_min} —Ä—É–±.)"
                    
                if duration > 0:
                    data_text += f" ({duration} –º–∏–Ω)"
                data_text += "\n"
            
            data_text += "\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞—Å—Ç–µ—Ä–∞ (–¢–û–ß–ù–´–ï –î–ê–ù–ù–´–ï –ò–ó API):\n"
            for master in masters:
                name = master.get("name", "–ë–µ–∑ –∏–º–µ–Ω–∏")
                specialization = master.get("specialization", "")
                staff_id = master.get("id")
                
                data_text += f"- {name}"
                if specialization:
                    data_text += f" ({specialization})"
                
                if staff_id:
                    master_services = self.get_services_for_master(company_id, staff_id)
                    if master_services:
                        data_text += f" - —É—Å–ª—É–≥–∏: "
                        service_names = []
                        for service in master_services:
                            service_name = service.get("title", "")
                            cost = service.get("cost", 0)
                            price_min = service.get("price_min", 0)
                            price_max = service.get("price_max", 0)
                            
                            if service_name:
                                if cost > 0:
                                    service_names.append(f"{service_name} ({cost}‚ÇΩ)")
                                elif price_min > 0 and price_max > 0:
                                    if price_min == price_max:
                                        service_names.append(f"{service_name} ({price_min}‚ÇΩ)")
                                    else:
                                        service_names.append(f"{service_name} ({price_min}-{price_max}‚ÇΩ)")
                                elif price_min > 0:
                                    service_names.append(f"{service_name} (–æ—Ç {price_min}‚ÇΩ)")
                                else:
                                    service_names.append(service_name)
                        data_text += ", ".join(service_names)
                
                data_text += "\n"
            
            return data_text
        except Exception as e:
            log.error(f"Error getting API data: {e}")
            return "–î–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
    
    def get_services_for_master(self, company_id: int, staff_id: int) -> List[Dict]:
        """Get services for master (same as Telegram bot)"""
        from app import get_services_for_master
        return get_services_for_master(company_id, staff_id)
    
    async def send_message(self, chat_id: str, message: str):
        """Send message via Node.js bridge"""
        try:
            if self.process and self.process.stdin:
                data = {
                    "type": "send",
                    "chatId": chat_id,
                    "message": message
                }
                self.process.stdin.write(json.dumps(data) + "\n")
                self.process.stdin.flush()
                log.info(f"üì§ Sent WhatsApp message to {chat_id}")
        except Exception as e:
            log.error(f"‚ùå Error sending message: {e}")
    
    def stop(self):
        """Stop WhatsApp bot"""
        if self.process:
            self.process.terminate()
            self.is_running = False
            log.info("üõë WhatsApp Bot stopped")

async def main():
    """Main function"""
    bot = WhatsAppBot()
    
    try:
        await bot.start()
    except KeyboardInterrupt:
        log.info("üõë Stopping WhatsApp Bot...")
        bot.stop()
    except Exception as e:
        log.error(f"‚ùå Unexpected error: {e}")
        bot.stop()

if __name__ == "__main__":
    asyncio.run(main())
